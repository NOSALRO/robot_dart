<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classrobot__dart_1_1Robot" kind="class" language="C++" prot="public">
    <compoundname>robot_dart::Robot</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; Robot &gt;</basecompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1A1" prot="public" virt="non-virtual">robot_dart::robots::A1</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Arm" prot="public" virt="non-virtual">robot_dart::robots::Arm</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Franka" prot="public" virt="non-virtual">robot_dart::robots::Franka</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Hexapod" prot="public" virt="non-virtual">robot_dart::robots::Hexapod</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1ICub" prot="public" virt="non-virtual">robot_dart::robots::ICub</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Iiwa" prot="public" virt="non-virtual">robot_dart::robots::Iiwa</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Pendulum" prot="public" virt="non-virtual">robot_dart::robots::Pendulum</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Talos" prot="public" virt="non-virtual">robot_dart::robots::Talos</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Tiago" prot="public" virt="non-virtual">robot_dart::robots::Tiago</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Ur3e" prot="public" virt="non-virtual">robot_dart::robots::Ur3e</derivedcompoundref>
    <derivedcompoundref refid="classrobot__dart_1_1robots_1_1Vx300" prot="public" virt="non-virtual">robot_dart::robots::Vx300</derivedcompoundref>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classrobot__dart_1_1Robot_1a655d18b872175815db814ef7f25117d5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RobotDARTSimu</definition>
        <argsstring></argsstring>
        <name>RobotDARTSimu</name>
        <qualifiedname>robot_dart::Robot::RobotDARTSimu</qualifiedname>
        <param>
          <type><ref refid="classrobot__dart_1_1RobotDARTSimu" kindref="compound">RobotDARTSimu</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="311" column="22" bodyfile="robot_dart/robot.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1a7eaf2574b39b95c1cb61ebacded66e14" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::_robot_name</definition>
        <argsstring></argsstring>
        <name>_robot_name</name>
        <qualifiedname>robot_dart::Robot::_robot_name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="313" column="21" bodyfile="robot_dart/robot.hpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1ad1522c12cd8aae9cf14225b8a0d8ecd2" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::_model_filename</definition>
        <argsstring></argsstring>
        <name>_model_filename</name>
        <qualifiedname>robot_dart::Robot::_model_filename</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="314" column="21" bodyfile="robot_dart/robot.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1a4be59bca1835cc6075da611897994c8e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;std::string, std::string&gt; &gt; robot_dart::Robot::_packages</definition>
        <argsstring></argsstring>
        <name>_packages</name>
        <qualifiedname>robot_dart::Robot::_packages</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="315" column="21" bodyfile="robot_dart/robot.hpp" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1aaf60e452285bb687d9abe7a7f525dd67" prot="protected" static="no" mutable="no">
        <type>dart::dynamics::SkeletonPtr</type>
        <definition>dart::dynamics::SkeletonPtr robot_dart::Robot::_skeleton</definition>
        <argsstring></argsstring>
        <name>_skeleton</name>
        <qualifiedname>robot_dart::Robot::_skeleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="316" column="37" bodyfile="robot_dart/robot.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1a5773d4df8c435f9cd4e315ff6a2bbb9e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classrobot__dart_1_1control_1_1RobotControl" kindref="compound">control::RobotControl</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;control::RobotControl&gt; &gt; robot_dart::Robot::_controllers</definition>
        <argsstring></argsstring>
        <name>_controllers</name>
        <qualifiedname>robot_dart::Robot::_controllers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="317" column="21" bodyfile="robot_dart/robot.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1a0b62de23bd5329aecc0cf2c3f0f92248" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, size_t &gt;</type>
        <definition>std::unordered_map&lt;std::string, size_t&gt; robot_dart::Robot::_dof_map</definition>
        <argsstring></argsstring>
        <name>_dof_map</name>
        <qualifiedname>robot_dart::Robot::_dof_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="318" column="28" bodyfile="robot_dart/robot.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1a31e3a6d529f86402181ca8faa4f9e10a" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, size_t &gt;</type>
        <definition>std::unordered_map&lt;std::string, size_t&gt; robot_dart::Robot::_joint_map</definition>
        <argsstring></argsstring>
        <name>_joint_map</name>
        <qualifiedname>robot_dart::Robot::_joint_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="318" column="37" bodyfile="robot_dart/robot.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1a0f0f858c6b833cb0892cc42131af7df4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool robot_dart::Robot::_cast_shadows</definition>
        <argsstring></argsstring>
        <name>_cast_shadows</name>
        <qualifiedname>robot_dart::Robot::_cast_shadows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="319" column="14" bodyfile="robot_dart/robot.hpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1aa0fd0718226ceb510980270755da8c37" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool robot_dart::Robot::_is_ghost</definition>
        <argsstring></argsstring>
        <name>_is_ghost</name>
        <qualifiedname>robot_dart::Robot::_is_ghost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="320" column="14" bodyfile="robot_dart/robot.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobot__dart_1_1Robot_1ad719a9328fc951b31352d3bda956f060" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; dart::dynamics::BodyNode *, double &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;dart::dynamics::BodyNode*, double&gt; &gt; robot_dart::Robot::_axis_shapes</definition>
        <argsstring></argsstring>
        <name>_axis_shapes</name>
        <qualifiedname>robot_dart::Robot::_axis_shapes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="321" column="21" bodyfile="robot_dart/robot.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a09f2520d1ec08fe65d517dcf94535747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robot_dart::Robot::Robot</definition>
        <argsstring>(const std::string &amp;model_file, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;packages, const std::string &amp;robot_name=&quot;robot&quot;, bool is_urdf_string=false, bool cast_shadows=true)</argsstring>
        <name>Robot</name>
        <qualifiedname>robot_dart::Robot::Robot</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_file</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
          <declname>packages</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>robot_name</declname>
          <defval>&quot;robot&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_urdf_string</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>cast_shadows</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="16" column="9" bodyfile="robot_dart/robot.cpp" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a19c4446d0f25c95738c021a4e59427f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robot_dart::Robot::Robot</definition>
        <argsstring>(const std::string &amp;model_file, const std::string &amp;robot_name=&quot;robot&quot;, bool is_urdf_string=false, bool cast_shadows=true)</argsstring>
        <name>Robot</name>
        <qualifiedname>robot_dart::Robot::Robot</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>robot_name</declname>
          <defval>&quot;robot&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_urdf_string</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>cast_shadows</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="17" column="9" bodyfile="robot_dart/robot.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac3040b65c60460920428f63e9acd6643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robot_dart::Robot::Robot</definition>
        <argsstring>(dart::dynamics::SkeletonPtr skeleton, const std::string &amp;robot_name=&quot;robot&quot;, bool cast_shadows=true)</argsstring>
        <name>Robot</name>
        <qualifiedname>robot_dart::Robot::Robot</qualifiedname>
        <param>
          <type>dart::dynamics::SkeletonPtr</type>
          <declname>skeleton</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>robot_name</declname>
          <defval>&quot;robot&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>cast_shadows</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="18" column="9" bodyfile="robot_dart/robot.cpp" bodystart="261" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ab1b72ace13d18ba2f3cb7a8b9d9f1b53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual robot_dart::Robot::~Robot</definition>
        <argsstring>()</argsstring>
        <name>~Robot</name>
        <qualifiedname>robot_dart::Robot::~Robot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="19" column="17" bodyfile="robot_dart/robot.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a6233cc8ce4b553221b98bdb0e8e8cf82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1Robot" kindref="compound">Robot</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Robot &gt; robot_dart::Robot::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>robot_dart::Robot::clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="21" column="25" bodyfile="robot_dart/robot.cpp" bodystart="270" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2712217f6eafe6727662d39aeb566049" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1Robot" kindref="compound">Robot</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Robot &gt; robot_dart::Robot::clone_ghost</definition>
        <argsstring>(const std::string &amp;ghost_name=&quot;ghost&quot;, const Eigen::Vector4d &amp;ghost_color={0.3, 0.3, 0.3, 0.7}) const</argsstring>
        <name>clone_ghost</name>
        <qualifiedname>robot_dart::Robot::clone_ghost</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>ghost_name</declname>
          <defval>&quot;ghost&quot;</defval>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>ghost_color</declname>
          <defval>{0.3, 0.3, 0.3, 0.7}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="22" column="25" bodyfile="robot_dart/robot.cpp" bodystart="303" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a68e3847796190e75682d963189f4b82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::SkeletonPtr</type>
        <definition>dart::dynamics::SkeletonPtr robot_dart::Robot::skeleton</definition>
        <argsstring>()</argsstring>
        <name>skeleton</name>
        <qualifiedname>robot_dart::Robot::skeleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="24" column="37" bodyfile="robot_dart/robot.cpp" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a07a2eb5890d034d179aa3baf0128eb52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::BodyNode *</type>
        <definition>dart::dynamics::BodyNode * robot_dart::Robot::body_node</definition>
        <argsstring>(const std::string &amp;body_name)</argsstring>
        <name>body_node</name>
        <qualifiedname>robot_dart::Robot::body_node</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="25" column="34" bodyfile="robot_dart/robot.cpp" bodystart="360" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a052221621acd6c3d2aa795d72e98a862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::BodyNode *</type>
        <definition>dart::dynamics::BodyNode * robot_dart::Robot::body_node</definition>
        <argsstring>(size_t body_index)</argsstring>
        <name>body_node</name>
        <qualifiedname>robot_dart::Robot::body_node</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="26" column="34" bodyfile="robot_dart/robot.cpp" bodystart="362" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a5444621b7a0e594edd74d952605329ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::Joint *</type>
        <definition>dart::dynamics::Joint * robot_dart::Robot::joint</definition>
        <argsstring>(const std::string &amp;joint_name)</argsstring>
        <name>joint</name>
        <qualifiedname>robot_dart::Robot::joint</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>joint_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="28" column="31" bodyfile="robot_dart/robot.cpp" bodystart="368" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a5780b86b53a8af4d34c687057304569c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::Joint *</type>
        <definition>dart::dynamics::Joint * robot_dart::Robot::joint</definition>
        <argsstring>(size_t joint_index)</argsstring>
        <name>joint</name>
        <qualifiedname>robot_dart::Robot::joint</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="29" column="31" bodyfile="robot_dart/robot.cpp" bodystart="370" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a78c2714622baac3af5c0ccb469f6acd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::DegreeOfFreedom *</type>
        <definition>dart::dynamics::DegreeOfFreedom * robot_dart::Robot::dof</definition>
        <argsstring>(const std::string &amp;dof_name)</argsstring>
        <name>dof</name>
        <qualifiedname>robot_dart::Robot::dof</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dof_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="31" column="41" bodyfile="robot_dart/robot.cpp" bodystart="376" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a9b5a9c29b5070452f29938b429b425c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::DegreeOfFreedom *</type>
        <definition>dart::dynamics::DegreeOfFreedom * robot_dart::Robot::dof</definition>
        <argsstring>(size_t dof_index)</argsstring>
        <name>dof</name>
        <qualifiedname>robot_dart::Robot::dof</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>dof_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="32" column="41" bodyfile="robot_dart/robot.cpp" bodystart="378" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad6eb5953c1040ae68768cbee13a6d225" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; robot_dart::Robot::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>robot_dart::Robot::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="34" column="27" bodyfile="robot_dart/robot.cpp" bodystart="384" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a15d6d6496b8dc22936dfed2af0cc05de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; robot_dart::Robot::model_filename</definition>
        <argsstring>() const</argsstring>
        <name>model_filename</name>
        <qualifiedname>robot_dart::Robot::model_filename</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="36" column="27" bodyfile="robot_dart/robot.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a54c3fa173f04715ddf8c29da55759e59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp; robot_dart::Robot::model_packages</definition>
        <argsstring>() const</argsstring>
        <name>model_packages</name>
        <qualifiedname>robot_dart::Robot::model_packages</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="37" column="27" bodyfile="robot_dart/robot.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1abf23bd42f3dd209a0950697f54921707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::update</definition>
        <argsstring>(double t)</argsstring>
        <name>update</name>
        <qualifiedname>robot_dart::Robot::update</qualifiedname>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="39" column="14" bodyfile="robot_dart/robot.cpp" bodystart="386" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae876113c3a85a5f4c97a4d144559ef4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::reinit_controllers</definition>
        <argsstring>()</argsstring>
        <name>reinit_controllers</name>
        <qualifiedname>robot_dart::Robot::reinit_controllers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="41" column="14" bodyfile="robot_dart/robot.cpp" bodystart="397" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aa35dc7d0113cad92abb3ca27bd0766f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::num_controllers</definition>
        <argsstring>() const</argsstring>
        <name>num_controllers</name>
        <qualifiedname>robot_dart::Robot::num_controllers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="43" column="16" bodyfile="robot_dart/robot.cpp" bodystart="403" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae717ad10036b644ce7337c085c35e1f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classrobot__dart_1_1control_1_1RobotControl" kindref="compound">control::RobotControl</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; control::RobotControl &gt; &gt; robot_dart::Robot::controllers</definition>
        <argsstring>() const</argsstring>
        <name>controllers</name>
        <qualifiedname>robot_dart::Robot::controllers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="44" column="21" bodyfile="robot_dart/robot.cpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ab986c5e4a69fb1b425c89f90bd7f3675" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classrobot__dart_1_1control_1_1RobotControl" kindref="compound">control::RobotControl</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; control::RobotControl &gt; &gt; robot_dart::Robot::active_controllers</definition>
        <argsstring>() const</argsstring>
        <name>active_controllers</name>
        <qualifiedname>robot_dart::Robot::active_controllers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="45" column="21" bodyfile="robot_dart/robot.cpp" bodystart="410" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a8bd4dcb83e5325aa59b407961fe6b662" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1control_1_1RobotControl" kindref="compound">control::RobotControl</ref> &gt;</type>
        <definition>std::shared_ptr&lt; control::RobotControl &gt; robot_dart::Robot::controller</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>controller</name>
        <qualifiedname>robot_dart::Robot::controller</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="47" column="25" bodyfile="robot_dart/robot.cpp" bodystart="421" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a5d92a6976f10cab8ebb130a8733b72b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_controller</definition>
        <argsstring>(const std::shared_ptr&lt; control::RobotControl &gt; &amp;controller, double weight=1.0)</argsstring>
        <name>add_controller</name>
        <qualifiedname>robot_dart::Robot::add_controller</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classrobot__dart_1_1control_1_1RobotControl" kindref="compound">control::RobotControl</ref> &gt; &amp;</type>
          <declname>controller</declname>
        </param>
        <param>
          <type>double</type>
          <declname>weight</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="49" column="14" bodyfile="robot_dart/robot.cpp" bodystart="427" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aade72f2b4bf8b9e4c12e7ca7c7156ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::remove_controller</definition>
        <argsstring>(const std::shared_ptr&lt; control::RobotControl &gt; &amp;controller)</argsstring>
        <name>remove_controller</name>
        <qualifiedname>robot_dart::Robot::remove_controller</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classrobot__dart_1_1control_1_1RobotControl" kindref="compound">control::RobotControl</ref> &gt; &amp;</type>
          <declname>controller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="51" column="14" bodyfile="robot_dart/robot.cpp" bodystart="436" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a7840ab10ee5b477ac4ec0d4d7c7f3170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::remove_controller</definition>
        <argsstring>(size_t index)</argsstring>
        <name>remove_controller</name>
        <qualifiedname>robot_dart::Robot::remove_controller</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="52" column="14" bodyfile="robot_dart/robot.cpp" bodystart="443" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a076443b2c0653f4a3dd58df13891bf13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::clear_controllers</definition>
        <argsstring>()</argsstring>
        <name>clear_controllers</name>
        <qualifiedname>robot_dart::Robot::clear_controllers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="53" column="14" bodyfile="robot_dart/robot.cpp" bodystart="449" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aa906fec013a9ef887518f73c859635a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::fix_to_world</definition>
        <argsstring>()</argsstring>
        <name>fix_to_world</name>
        <qualifiedname>robot_dart::Robot::fix_to_world</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="55" column="14" bodyfile="robot_dart/robot.cpp" bodystart="451" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ab0364e9bc9c43602a3bad67ca9b5eb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::free_from_world</definition>
        <argsstring>(const Eigen::Vector6d &amp;pose=Eigen::Vector6d::Zero())</argsstring>
        <name>free_from_world</name>
        <qualifiedname>robot_dart::Robot::free_from_world</qualifiedname>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>pose</declname>
          <defval>Eigen::Vector6d::Zero()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="57" column="14" bodyfile="robot_dart/robot.cpp" bodystart="471" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a6282ab081fb2a1c495d991b73d1763a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robot_dart::Robot::fixed</definition>
        <argsstring>() const</argsstring>
        <name>fixed</name>
        <qualifiedname>robot_dart::Robot::fixed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="59" column="14" bodyfile="robot_dart/robot.cpp" bodystart="494" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0cf16fdae26cdb7c023e6a9f5f5e996b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robot_dart::Robot::free</definition>
        <argsstring>() const</argsstring>
        <name>free</name>
        <qualifiedname>robot_dart::Robot::free</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="60" column="14" bodyfile="robot_dart/robot.cpp" bodystart="501" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a96af674783970d47996056c4ead16f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>robot_dart::Robot::reset</qualifiedname>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1A1_1aecfabed2320d688d19182895a4e5b54a">reset</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Hexapod_1ae604d5cae7464e56f830fb2728d97410">reset</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1ICub_1ad2b16c0be9841b5793532140fc4164fb">reset</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Talos_1a3da73cc5b4071ece90d96b46800e77a7">reset</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Tiago_1aa26777e422f6abe4e9dd8c94d233ddd6">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="62" column="22" bodyfile="robot_dart/robot.cpp" bodystart="508" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae32b5003e7d3b504461a4fe4baa7cb6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::clear_external_forces</definition>
        <argsstring>()</argsstring>
        <name>clear_external_forces</name>
        <qualifiedname>robot_dart::Robot::clear_external_forces</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="64" column="14" bodyfile="robot_dart/robot.cpp" bodystart="519" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2a32d54d025c294b028fe158879def77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::clear_internal_forces</definition>
        <argsstring>()</argsstring>
        <name>clear_internal_forces</name>
        <qualifiedname>robot_dart::Robot::clear_internal_forces</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="65" column="14" bodyfile="robot_dart/robot.cpp" bodystart="521" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a72146fe8cfb5566d4f48c083bdf5b210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::reset_commands</definition>
        <argsstring>()</argsstring>
        <name>reset_commands</name>
        <qualifiedname>robot_dart::Robot::reset_commands</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="66" column="14" bodyfile="robot_dart/robot.cpp" bodystart="527" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1abadb19f0b48f7de9617aaf2f59ec2675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_actuator_types</definition>
        <argsstring>(const std::string &amp;type, const std::vector&lt; std::string &gt; &amp;joint_names={}, bool override_mimic=false, bool override_base=false)</argsstring>
        <name>set_actuator_types</name>
        <qualifiedname>robot_dart::Robot::set_actuator_types</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>joint_names</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_mimic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_base</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="70" column="14" bodyfile="robot_dart/robot.cpp" bodystart="529" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aae1ec1a7844e28b7a6ddc64682917d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_actuator_type</definition>
        <argsstring>(const std::string &amp;type, const std::string &amp;joint_name, bool override_mimic=false, bool override_base=false)</argsstring>
        <name>set_actuator_type</name>
        <qualifiedname>robot_dart::Robot::set_actuator_type</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>joint_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override_mimic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_base</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="71" column="14" bodyfile="robot_dart/robot.cpp" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a7c61be2f9030a7eb030899d01f6f0c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_mimic</definition>
        <argsstring>(const std::string &amp;joint_name, const std::string &amp;mimic_joint_name, double multiplier=1., double offset=0.)</argsstring>
        <name>set_mimic</name>
        <qualifiedname>robot_dart::Robot::set_mimic</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>joint_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mimic_joint_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>offset</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="72" column="14" bodyfile="robot_dart/robot.cpp" bodystart="587" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a00c540535540f7da302e4ddb08d1a0bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::actuator_type</definition>
        <argsstring>(const std::string &amp;joint_name) const</argsstring>
        <name>actuator_type</name>
        <qualifiedname>robot_dart::Robot::actuator_type</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>joint_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="74" column="21" bodyfile="robot_dart/robot.cpp" bodystart="598" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a48a5549c1a51bb1c0783e7ca89382c61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::actuator_types</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;joint_names={}) const</argsstring>
        <name>actuator_types</name>
        <qualifiedname>robot_dart::Robot::actuator_types</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>joint_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="75" column="21" bodyfile="robot_dart/robot.cpp" bodystart="620" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aabe0ce110443bbf7edc9e3cbb4b206f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_position_enforced</definition>
        <argsstring>(const std::vector&lt; bool &gt; &amp;enforced, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_position_enforced</name>
        <qualifiedname>robot_dart::Robot::set_position_enforced</qualifiedname>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>enforced</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="77" column="14" bodyfile="robot_dart/robot.cpp" bodystart="657" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a03107a2acedf29d9125265e5515aec67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_position_enforced</definition>
        <argsstring>(bool enforced, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_position_enforced</name>
        <qualifiedname>robot_dart::Robot::set_position_enforced</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enforced</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="78" column="14" bodyfile="robot_dart/robot.cpp" bodystart="686" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1addc09ef4a38f71cbbbd3167326b00536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt; bool &gt; robot_dart::Robot::position_enforced</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>position_enforced</name>
        <qualifiedname>robot_dart::Robot::position_enforced</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="80" column="21" bodyfile="robot_dart/robot.cpp" bodystart="696" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aba430bb07146219e06cbdaa7518b84c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::force_position_bounds</definition>
        <argsstring>()</argsstring>
        <name>force_position_bounds</name>
        <qualifiedname>robot_dart::Robot::force_position_bounds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="82" column="14" bodyfile="robot_dart/robot.cpp" bodystart="723" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aa7c6b33471f4fb725b5dca3e73fbdaaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_damping_coeffs</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;damps, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_damping_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_damping_coeffs</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>damps</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="84" column="14" bodyfile="robot_dart/robot.cpp" bodystart="748" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0c245a940ddb2ac242c350a080d86422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_damping_coeffs</definition>
        <argsstring>(double damp, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_damping_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_damping_coeffs</qualifiedname>
        <param>
          <type>double</type>
          <declname>damp</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="85" column="14" bodyfile="robot_dart/robot.cpp" bodystart="769" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a64ffd08d23500da292755881993a78a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; robot_dart::Robot::damping_coeffs</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>damping_coeffs</name>
        <qualifiedname>robot_dart::Robot::damping_coeffs</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="87" column="21" bodyfile="robot_dart/robot.cpp" bodystart="779" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2bb5d3ba1108fd9ae1ceca498dfd1a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_coulomb_coeffs</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;cfrictions, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_coulomb_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_coulomb_coeffs</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>cfrictions</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="89" column="14" bodyfile="robot_dart/robot.cpp" bodystart="798" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3992616f6eb4866cdf7a75b7bf84ee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_coulomb_coeffs</definition>
        <argsstring>(double cfriction, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_coulomb_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_coulomb_coeffs</qualifiedname>
        <param>
          <type>double</type>
          <declname>cfriction</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="90" column="14" bodyfile="robot_dart/robot.cpp" bodystart="819" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aa7cbf18b419b41e45923397e1808589d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; robot_dart::Robot::coulomb_coeffs</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>coulomb_coeffs</name>
        <qualifiedname>robot_dart::Robot::coulomb_coeffs</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="92" column="21" bodyfile="robot_dart/robot.cpp" bodystart="829" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a6e252fde5240760f124cfd4deffb70e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_spring_stiffnesses</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;stiffnesses, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_spring_stiffnesses</name>
        <qualifiedname>robot_dart::Robot::set_spring_stiffnesses</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>stiffnesses</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="94" column="14" bodyfile="robot_dart/robot.cpp" bodystart="848" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae6933d0a210ce69675a6cf730850306c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_spring_stiffnesses</definition>
        <argsstring>(double stiffness, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_spring_stiffnesses</name>
        <qualifiedname>robot_dart::Robot::set_spring_stiffnesses</qualifiedname>
        <param>
          <type>double</type>
          <declname>stiffness</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="95" column="14" bodyfile="robot_dart/robot.cpp" bodystart="869" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aa05256ac963fa4282ed6ba13fc7aa13a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; robot_dart::Robot::spring_stiffnesses</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>spring_stiffnesses</name>
        <qualifiedname>robot_dart::Robot::spring_stiffnesses</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="97" column="21" bodyfile="robot_dart/robot.cpp" bodystart="879" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a04b9d1b06be744be5df80b1e5cd4cdbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_friction_dir</definition>
        <argsstring>(const std::string &amp;body_name, const Eigen::Vector3d &amp;direction)</argsstring>
        <name>set_friction_dir</name>
        <qualifiedname>robot_dart::Robot::set_friction_dir</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="100" column="14" bodyfile="robot_dart/robot.cpp" bodystart="909" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac5d8e880cb1a4ffab5da4f95ee9f481f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_friction_dir</definition>
        <argsstring>(size_t body_index, const Eigen::Vector3d &amp;direction)</argsstring>
        <name>set_friction_dir</name>
        <qualifiedname>robot_dart::Robot::set_friction_dir</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="101" column="14" bodyfile="robot_dart/robot.cpp" bodystart="921" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac32ae8aa93fdb58b8e7b6dad1979a0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d robot_dart::Robot::friction_dir</definition>
        <argsstring>(const std::string &amp;body_name)</argsstring>
        <name>friction_dir</name>
        <qualifiedname>robot_dart::Robot::friction_dir</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="102" column="25" bodyfile="robot_dart/robot.cpp" bodystart="944" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1af7f3a1560a9113d44dc8a5e732c275c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d robot_dart::Robot::friction_dir</definition>
        <argsstring>(size_t body_index)</argsstring>
        <name>friction_dir</name>
        <qualifiedname>robot_dart::Robot::friction_dir</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="103" column="25" bodyfile="robot_dart/robot.cpp" bodystart="957" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac14e86971cfd0c3a9994c80012ec3287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_friction_coeff</definition>
        <argsstring>(const std::string &amp;body_name, double value)</argsstring>
        <name>set_friction_coeff</name>
        <qualifiedname>robot_dart::Robot::set_friction_coeff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="105" column="14" bodyfile="robot_dart/robot.cpp" bodystart="980" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a634a4509c2e336b394e6c0ae67f781ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_friction_coeff</definition>
        <argsstring>(size_t body_index, double value)</argsstring>
        <name>set_friction_coeff</name>
        <qualifiedname>robot_dart::Robot::set_friction_coeff</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="106" column="14" bodyfile="robot_dart/robot.cpp" bodystart="988" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad178f94548cb3c9b1628cc0e5d3ae737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_friction_coeffs</definition>
        <argsstring>(double value)</argsstring>
        <name>set_friction_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_friction_coeffs</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="107" column="14" bodyfile="robot_dart/robot.cpp" bodystart="995" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a83aac03d715c587d6e3e28ec9031a460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::friction_coeff</definition>
        <argsstring>(const std::string &amp;body_name)</argsstring>
        <name>friction_coeff</name>
        <qualifiedname>robot_dart::Robot::friction_coeff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="108" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1014" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae0b475c44170e78665cec05ba8a3acbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::friction_coeff</definition>
        <argsstring>(size_t body_index)</argsstring>
        <name>friction_coeff</name>
        <qualifiedname>robot_dart::Robot::friction_coeff</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="109" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1022" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2a9d2e74efb4833f7d5a0e2df9725511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_secondary_friction_coeff</definition>
        <argsstring>(const std::string &amp;body_name, double value)</argsstring>
        <name>set_secondary_friction_coeff</name>
        <qualifiedname>robot_dart::Robot::set_secondary_friction_coeff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="111" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1037" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ab8a0b5b47a86fce8b73a0458112c2e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_secondary_friction_coeff</definition>
        <argsstring>(size_t body_index, double value)</argsstring>
        <name>set_secondary_friction_coeff</name>
        <qualifiedname>robot_dart::Robot::set_secondary_friction_coeff</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="112" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1049" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ab42cc7938f120692e9194e0f3a01631c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_secondary_friction_coeffs</definition>
        <argsstring>(double value)</argsstring>
        <name>set_secondary_friction_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_secondary_friction_coeffs</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="113" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1060" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a385f5ae6bdded9f1a2700db664f8f74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::secondary_friction_coeff</definition>
        <argsstring>(const std::string &amp;body_name)</argsstring>
        <name>secondary_friction_coeff</name>
        <qualifiedname>robot_dart::Robot::secondary_friction_coeff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="114" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1081" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a67025eded02f4b33c480e4316c4a5fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::secondary_friction_coeff</definition>
        <argsstring>(size_t body_index)</argsstring>
        <name>secondary_friction_coeff</name>
        <qualifiedname>robot_dart::Robot::secondary_friction_coeff</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="115" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1094" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad649f474ec7ea7390c1f2ae143988b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_restitution_coeff</definition>
        <argsstring>(const std::string &amp;body_name, double value)</argsstring>
        <name>set_restitution_coeff</name>
        <qualifiedname>robot_dart::Robot::set_restitution_coeff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="117" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1116" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aeac33d4b4f153d10ae32763ccafa5e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_restitution_coeff</definition>
        <argsstring>(size_t body_index, double value)</argsstring>
        <name>set_restitution_coeff</name>
        <qualifiedname>robot_dart::Robot::set_restitution_coeff</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="118" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1124" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3ce18d0787ba9e40e45eaed02fdeb31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_restitution_coeffs</definition>
        <argsstring>(double value)</argsstring>
        <name>set_restitution_coeffs</name>
        <qualifiedname>robot_dart::Robot::set_restitution_coeffs</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="119" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1131" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a67852b8ab835534332cae31a5d7ef8b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::restitution_coeff</definition>
        <argsstring>(const std::string &amp;body_name)</argsstring>
        <name>restitution_coeff</name>
        <qualifiedname>robot_dart::Robot::restitution_coeff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="120" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1150" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a38c8fc8b21ada64c3d6fb53a07469cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::restitution_coeff</definition>
        <argsstring>(size_t body_index)</argsstring>
        <name>restitution_coeff</name>
        <qualifiedname>robot_dart::Robot::restitution_coeff</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="121" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1158" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad400b5495438ff50f675252425d221bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Isometry3d</type>
        <definition>Eigen::Isometry3d robot_dart::Robot::base_pose</definition>
        <argsstring>() const</argsstring>
        <name>base_pose</name>
        <qualifiedname>robot_dart::Robot::base_pose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="123" column="27" bodyfile="robot_dart/robot.cpp" bodystart="1165" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac2cee8997e16fca8ecf238164ae369de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::base_pose_vec</definition>
        <argsstring>() const</argsstring>
        <name>base_pose_vec</name>
        <qualifiedname>robot_dart::Robot::base_pose_vec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="124" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1179" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a86f3346f48c41394a8af7457f3d63ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_base_pose</definition>
        <argsstring>(const Eigen::Isometry3d &amp;tf)</argsstring>
        <name>set_base_pose</name>
        <qualifiedname>robot_dart::Robot::set_base_pose</qualifiedname>
        <param>
          <type>const Eigen::Isometry3d &amp;</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="125" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1193" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a4941fd995efaabe54488281c9f8dd1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_base_pose</definition>
        <argsstring>(const Eigen::Vector6d &amp;pose)</argsstring>
        <name>set_base_pose</name>
        <qualifiedname>robot_dart::Robot::set_base_pose</qualifiedname>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
<para>set base pose: pose is a 6D vector (first 3D orientation in angle-axis and last 3D translation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="126" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1209" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0e78d17261ed90dd9e74d11f92f163be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::num_dofs</definition>
        <argsstring>() const</argsstring>
        <name>num_dofs</name>
        <qualifiedname>robot_dart::Robot::num_dofs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="128" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1224" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad178003f8bb4df47a69d28a19b737a4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::num_joints</definition>
        <argsstring>() const</argsstring>
        <name>num_joints</name>
        <qualifiedname>robot_dart::Robot::num_joints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="129" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1226" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a61449b01547ebee00294adb7e8467239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::num_bodies</definition>
        <argsstring>() const</argsstring>
        <name>num_bodies</name>
        <qualifiedname>robot_dart::Robot::num_bodies</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="130" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1228" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a9f7e3fc2c1cce48a29aec0f52271f1f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d robot_dart::Robot::com</definition>
        <argsstring>() const</argsstring>
        <name>com</name>
        <qualifiedname>robot_dart::Robot::com</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="132" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1230" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a474232a2fa6ebd96acc3efacb665be0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::com_velocity</definition>
        <argsstring>() const</argsstring>
        <name>com_velocity</name>
        <qualifiedname>robot_dart::Robot::com_velocity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="133" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1232" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a7f287dd32b8b66d9f9fcdebc9eb690bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::com_acceleration</definition>
        <argsstring>() const</argsstring>
        <name>com_acceleration</name>
        <qualifiedname>robot_dart::Robot::com_acceleration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="134" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1234" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a35c4091c282e0ea99658c8ae23882e64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::positions</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>positions</name>
        <qualifiedname>robot_dart::Robot::positions</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="136" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1236" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a45bff48126acf1c3b1440053408eda7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_positions</definition>
        <argsstring>(const Eigen::VectorXd &amp;positions, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_positions</name>
        <qualifiedname>robot_dart::Robot::set_positions</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="137" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1241" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a421bf15e4d78135c6e099ec947b4b667" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::position_lower_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>position_lower_limits</name>
        <qualifiedname>robot_dart::Robot::position_lower_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="139" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1246" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1af89cffc9ac317ac2d0d4490c66817921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_position_lower_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;positions, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_position_lower_limits</name>
        <qualifiedname>robot_dart::Robot::set_position_lower_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="140" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1251" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2a1af9d70b7bf58d7670f37e40967978" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::position_upper_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>position_upper_limits</name>
        <qualifiedname>robot_dart::Robot::position_upper_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="141" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1256" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a1c01a0683952e842cc55b6b96d1e4697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_position_upper_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;positions, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_position_upper_limits</name>
        <qualifiedname>robot_dart::Robot::set_position_upper_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="142" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1261" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a814e4c94ef50f8295d95ada6c4322366" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::velocities</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>velocities</name>
        <qualifiedname>robot_dart::Robot::velocities</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="144" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1266" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a7e1a2418605dba9850c77b440fe7de9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_velocities</definition>
        <argsstring>(const Eigen::VectorXd &amp;velocities, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_velocities</name>
        <qualifiedname>robot_dart::Robot::set_velocities</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>velocities</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="145" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1271" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2643cd261364ca54d1438bef11a9aabd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::velocity_lower_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>velocity_lower_limits</name>
        <qualifiedname>robot_dart::Robot::velocity_lower_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="147" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1276" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3b7f4c92aef9ed078f4d76c92238ff35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_velocity_lower_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;velocities, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_velocity_lower_limits</name>
        <qualifiedname>robot_dart::Robot::set_velocity_lower_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>velocities</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="148" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1281" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a5d31f1b79e3ca556421546d14f49dc35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::velocity_upper_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>velocity_upper_limits</name>
        <qualifiedname>robot_dart::Robot::velocity_upper_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="149" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1286" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0e79dee604da70322160164799ddd086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_velocity_upper_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;velocities, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_velocity_upper_limits</name>
        <qualifiedname>robot_dart::Robot::set_velocity_upper_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>velocities</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="150" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1291" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a5e6df4bae52c3397794965e6872b4ce4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::accelerations</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>accelerations</name>
        <qualifiedname>robot_dart::Robot::accelerations</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="152" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1296" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a7b1e6a847335419f9b4e146b7963dc42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_accelerations</definition>
        <argsstring>(const Eigen::VectorXd &amp;accelerations, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_accelerations</name>
        <qualifiedname>robot_dart::Robot::set_accelerations</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>accelerations</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="153" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1301" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a61a85723b90798b9a5666314f0841a62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::acceleration_lower_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>acceleration_lower_limits</name>
        <qualifiedname>robot_dart::Robot::acceleration_lower_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="155" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1306" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac64b16f56fecb1dec98b6ce09aa7461b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_acceleration_lower_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;accelerations, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_acceleration_lower_limits</name>
        <qualifiedname>robot_dart::Robot::set_acceleration_lower_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>accelerations</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="156" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1311" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a8d070ad570352588bfa864a884453af1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::acceleration_upper_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>acceleration_upper_limits</name>
        <qualifiedname>robot_dart::Robot::acceleration_upper_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="157" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1316" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a6e3256e13d7b59aa20dd2e8c0518191c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_acceleration_upper_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;accelerations, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_acceleration_upper_limits</name>
        <qualifiedname>robot_dart::Robot::set_acceleration_upper_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>accelerations</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="158" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1321" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a748cd1deb8ee9531a677a0ac18328bfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::forces</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>forces</name>
        <qualifiedname>robot_dart::Robot::forces</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="160" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1326" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac1cb736079db2c3c7cf959a5d1054f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_forces</definition>
        <argsstring>(const Eigen::VectorXd &amp;forces, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_forces</name>
        <qualifiedname>robot_dart::Robot::set_forces</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>forces</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="161" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1331" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aa42f2e37b4d432cf5372f831a2168ea8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::force_lower_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>force_lower_limits</name>
        <qualifiedname>robot_dart::Robot::force_lower_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="163" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1336" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3210cc606857712b370dbad83b4d0c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_force_lower_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;forces, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_force_lower_limits</name>
        <qualifiedname>robot_dart::Robot::set_force_lower_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>forces</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="164" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1341" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a1352e33e735bf3351fc7d05b0f688c68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::force_upper_limits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>force_upper_limits</name>
        <qualifiedname>robot_dart::Robot::force_upper_limits</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="165" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1346" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0d954f7893114d8cba8c4b28a1329bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_force_upper_limits</definition>
        <argsstring>(const Eigen::VectorXd &amp;forces, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_force_upper_limits</name>
        <qualifiedname>robot_dart::Robot::set_force_upper_limits</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>forces</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="166" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1351" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0469631b5e07888273d593c05091567a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::commands</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>commands</name>
        <qualifiedname>robot_dart::Robot::commands</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="168" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1356" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ab1f41044b73068c6cb685f03b268a4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_commands</definition>
        <argsstring>(const Eigen::VectorXd &amp;commands, const std::vector&lt; std::string &gt; &amp;dof_names={})</argsstring>
        <name>set_commands</name>
        <qualifiedname>robot_dart::Robot::set_commands</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="169" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1361" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1afd8ff947b27f25ce8dbe7580b54ba042" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt;</type>
        <definition>std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; robot_dart::Robot::force_torque</definition>
        <argsstring>(size_t joint_index) const</argsstring>
        <name>force_torque</name>
        <qualifiedname>robot_dart::Robot::force_torque</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="171" column="19" bodyfile="robot_dart/robot.cpp" bodystart="1366" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a5b2d8f51cb243d4d063aba6a8ae16d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_external_force</definition>
        <argsstring>(const std::string &amp;body_name, const Eigen::Vector3d &amp;force, const Eigen::Vector3d &amp;offset=Eigen::Vector3d::Zero(), bool force_local=false, bool offset_local=true)</argsstring>
        <name>set_external_force</name>
        <qualifiedname>robot_dart::Robot::set_external_force</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>offset</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>offset_local</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="173" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1388" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a4ccb2241fa1be81f24ce30242a33d2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_external_force</definition>
        <argsstring>(size_t body_index, const Eigen::Vector3d &amp;force, const Eigen::Vector3d &amp;offset=Eigen::Vector3d::Zero(), bool force_local=false, bool offset_local=true)</argsstring>
        <name>set_external_force</name>
        <qualifiedname>robot_dart::Robot::set_external_force</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>offset</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>offset_local</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="174" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1396" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a9f27eb220ea85b8253e518ac017694ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_external_force</definition>
        <argsstring>(const std::string &amp;body_name, const Eigen::Vector3d &amp;force, const Eigen::Vector3d &amp;offset=Eigen::Vector3d::Zero(), bool force_local=false, bool offset_local=true)</argsstring>
        <name>add_external_force</name>
        <qualifiedname>robot_dart::Robot::add_external_force</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>offset</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>offset_local</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="175" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1404" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aaae31353f07d535864a1b9a7ca516226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_external_force</definition>
        <argsstring>(size_t body_index, const Eigen::Vector3d &amp;force, const Eigen::Vector3d &amp;offset=Eigen::Vector3d::Zero(), bool force_local=false, bool offset_local=true)</argsstring>
        <name>add_external_force</name>
        <qualifiedname>robot_dart::Robot::add_external_force</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>offset</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>offset_local</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="176" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1412" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1af39c094130f6ff89b5c60175b48d2e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_external_torque</definition>
        <argsstring>(const std::string &amp;body_name, const Eigen::Vector3d &amp;torque, bool local=false)</argsstring>
        <name>set_external_torque</name>
        <qualifiedname>robot_dart::Robot::set_external_torque</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>torque</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="178" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1420" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1afb038299911a52d927d80f59aec8f9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_external_torque</definition>
        <argsstring>(size_t body_index, const Eigen::Vector3d &amp;torque, bool local=false)</argsstring>
        <name>set_external_torque</name>
        <qualifiedname>robot_dart::Robot::set_external_torque</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>torque</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="179" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1428" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1afa6f12be3ab4a7b843d947d04cfc9c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_external_torque</definition>
        <argsstring>(const std::string &amp;body_name, const Eigen::Vector3d &amp;torque, bool local=false)</argsstring>
        <name>add_external_torque</name>
        <qualifiedname>robot_dart::Robot::add_external_torque</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>torque</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="180" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1436" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0588daac30492a9f397a3ff706b9f745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_external_torque</definition>
        <argsstring>(size_t body_index, const Eigen::Vector3d &amp;torque, bool local=false)</argsstring>
        <name>add_external_torque</name>
        <qualifiedname>robot_dart::Robot::add_external_torque</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>torque</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="181" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1444" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a69283ec10e0e6d9abf34e87812e1325d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::external_forces</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>external_forces</name>
        <qualifiedname>robot_dart::Robot::external_forces</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="183" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1452" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3e7aa6442de010a6d5e89a8311fb68ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::external_forces</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>external_forces</name>
        <qualifiedname>robot_dart::Robot::external_forces</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="184" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1460" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad19ed209802858e53cf40aa505f0d08c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Isometry3d</type>
        <definition>Eigen::Isometry3d robot_dart::Robot::body_pose</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>body_pose</name>
        <qualifiedname>robot_dart::Robot::body_pose</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="186" column="27" bodyfile="robot_dart/robot.cpp" bodystart="1469" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a26d77ee6fa5d2b5be180442dca6a6fd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Isometry3d</type>
        <definition>Eigen::Isometry3d robot_dart::Robot::body_pose</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>body_pose</name>
        <qualifiedname>robot_dart::Robot::body_pose</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="187" column="27" bodyfile="robot_dart/robot.cpp" bodystart="1476" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a17e1917c748f574a80694ae13a40251e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::body_pose_vec</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>body_pose_vec</name>
        <qualifiedname>robot_dart::Robot::body_pose_vec</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="189" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1482" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a8bcda13807b7dee0c68d7e800e7ccfe2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::body_pose_vec</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>body_pose_vec</name>
        <qualifiedname>robot_dart::Robot::body_pose_vec</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="190" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1495" bodyend="1506"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a120256b9d6f0708e6f9a841dc7316fb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::body_velocity</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>body_velocity</name>
        <qualifiedname>robot_dart::Robot::body_velocity</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="192" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1508" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a76b6b797ddf0f823190bc1e0c14cca58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::body_velocity</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>body_velocity</name>
        <qualifiedname>robot_dart::Robot::body_velocity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="193" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1515" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a61d0a6329505a84fde05e310321fb1d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::body_acceleration</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>body_acceleration</name>
        <qualifiedname>robot_dart::Robot::body_acceleration</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="195" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1521" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2852e7f5d184abec877b2a18baf436b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d robot_dart::Robot::body_acceleration</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>body_acceleration</name>
        <qualifiedname>robot_dart::Robot::body_acceleration</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="196" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1528" bodyend="1532"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1afccd8d152f03b185940d39d04085e977" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::body_names</definition>
        <argsstring>() const</argsstring>
        <name>body_names</name>
        <qualifiedname>robot_dart::Robot::body_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="198" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1534" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a6fe9140834cbd491f619e4190636ed34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::body_name</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>body_name</name>
        <qualifiedname>robot_dart::Robot::body_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="199" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1542" bodyend="1546"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a099c64842ed4b1935817cbbb7adc812d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_body_name</definition>
        <argsstring>(size_t body_index, const std::string &amp;body_name)</argsstring>
        <name>set_body_name</name>
        <qualifiedname>robot_dart::Robot::set_body_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="200" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1548" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a731a45d565e8d765f9018a347fe97578" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::body_index</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>body_index</name>
        <qualifiedname>robot_dart::Robot::body_index</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="201" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1554" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3251994a3886a3c0ab401223bb0d8385" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::body_mass</definition>
        <argsstring>(const std::string &amp;body_name) const</argsstring>
        <name>body_mass</name>
        <qualifiedname>robot_dart::Robot::body_mass</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="203" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1561" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a01586a11da7e3f62c806bf396f5e37b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double robot_dart::Robot::body_mass</definition>
        <argsstring>(size_t body_index) const</argsstring>
        <name>body_mass</name>
        <qualifiedname>robot_dart::Robot::body_mass</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="204" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1568" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ada98abb4811cc772040e39bd08245b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_body_mass</definition>
        <argsstring>(const std::string &amp;body_name, double mass)</argsstring>
        <name>set_body_mass</name>
        <qualifiedname>robot_dart::Robot::set_body_mass</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="205" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1574" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a023916d85fc4a50a8348c92a48a8defa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_body_mass</definition>
        <argsstring>(size_t body_index, double mass)</argsstring>
        <name>set_body_mass</name>
        <qualifiedname>robot_dart::Robot::set_body_mass</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="206" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1581" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1adf0a2e4b493280f10bb680e00a3c3a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_body_mass</definition>
        <argsstring>(const std::string &amp;body_name, double mass)</argsstring>
        <name>add_body_mass</name>
        <qualifiedname>robot_dart::Robot::add_body_mass</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="207" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1587" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a4e13af77c017baadc4cc12b5bb316d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::add_body_mass</definition>
        <argsstring>(size_t body_index, double mass)</argsstring>
        <name>add_body_mass</name>
        <qualifiedname>robot_dart::Robot::add_body_mass</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>body_index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="208" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1594" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3e1fae4602fb3552dd3ee6c7a2cd7b48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::jacobian</definition>
        <argsstring>(const std::string &amp;body_name, const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>jacobian</name>
        <qualifiedname>robot_dart::Robot::jacobian</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="210" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1601" bodyend="1609"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a204071a54f94f7e1ae17f37be4b40b32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::jacobian_deriv</definition>
        <argsstring>(const std::string &amp;body_name, const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>jacobian_deriv</name>
        <qualifiedname>robot_dart::Robot::jacobian_deriv</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="211" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1611" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a142c88b7f5401a14158e913f2aa7896c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::com_jacobian</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>com_jacobian</name>
        <qualifiedname>robot_dart::Robot::com_jacobian</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="213" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1621" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad8a6eba524d58fd836d6b34a6351d01e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::com_jacobian_deriv</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>com_jacobian_deriv</name>
        <qualifiedname>robot_dart::Robot::com_jacobian_deriv</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="214" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1628" bodyend="1633"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a42462001f1993ce3aa1689d12d2befc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::mass_matrix</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>mass_matrix</name>
        <qualifiedname>robot_dart::Robot::mass_matrix</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="216" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1635" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a63b2fb673184bbe16b9e64cff713faac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::aug_mass_matrix</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>aug_mass_matrix</name>
        <qualifiedname>robot_dart::Robot::aug_mass_matrix</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="217" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1642" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a1048177099c21743442cbac9e89c789e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::inv_mass_matrix</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>inv_mass_matrix</name>
        <qualifiedname>robot_dart::Robot::inv_mass_matrix</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="218" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1649" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae8adefdbda03f635f3ce3a021603b6dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::inv_aug_mass_matrix</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>inv_aug_mass_matrix</name>
        <qualifiedname>robot_dart::Robot::inv_aug_mass_matrix</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="219" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1656" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0233af2b74143973bc06e97ecbedec32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::coriolis_forces</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>coriolis_forces</name>
        <qualifiedname>robot_dart::Robot::coriolis_forces</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="221" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1663" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a4abe011424c3e775b59cd1befb959a70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::gravity_forces</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>gravity_forces</name>
        <qualifiedname>robot_dart::Robot::gravity_forces</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="222" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1668" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1abcd36ccf5b5756011bd1d8a674f48942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::coriolis_gravity_forces</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>coriolis_gravity_forces</name>
        <qualifiedname>robot_dart::Robot::coriolis_gravity_forces</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="223" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1673" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a952d95bc1e9bfdab9a0d415f6b3571cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::constraint_forces</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;dof_names={}) const</argsstring>
        <name>constraint_forces</name>
        <qualifiedname>robot_dart::Robot::constraint_forces</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="224" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1678" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a9b7cf7ba649853067163c21dc92c6df1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd robot_dart::Robot::vec_dof</definition>
        <argsstring>(const Eigen::VectorXd &amp;vec, const std::vector&lt; std::string &gt; &amp;dof_names) const</argsstring>
        <name>vec_dof</name>
        <qualifiedname>robot_dart::Robot::vec_dof</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="227" column="25" bodyfile="robot_dart/robot.cpp" bodystart="1683" bodyend="1696"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a2d5700673de40eece09188ab445b8833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::update_joint_dof_maps</definition>
        <argsstring>()</argsstring>
        <name>update_joint_dof_maps</name>
        <qualifiedname>robot_dart::Robot::update_joint_dof_maps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="229" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1698" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aed58ff57570013b420e932e1fa254368" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::unordered_map&lt; std::string, size_t &gt; &amp;</type>
        <definition>const std::unordered_map&lt; std::string, size_t &gt; &amp; robot_dart::Robot::dof_map</definition>
        <argsstring>() const</argsstring>
        <name>dof_map</name>
        <qualifiedname>robot_dart::Robot::dof_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="230" column="34" bodyfile="robot_dart/robot.cpp" bodystart="1711" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a523009d233b897ace54580afef980e01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::unordered_map&lt; std::string, size_t &gt; &amp;</type>
        <definition>const std::unordered_map&lt; std::string, size_t &gt; &amp; robot_dart::Robot::joint_map</definition>
        <argsstring>() const</argsstring>
        <name>joint_map</name>
        <qualifiedname>robot_dart::Robot::joint_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="231" column="34" bodyfile="robot_dart/robot.cpp" bodystart="1713" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a648a80792f2f14b3f190e9b07f1ce97c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::dof_names</definition>
        <argsstring>(bool filter_mimics=false, bool filter_locked=false, bool filter_passive=false) const</argsstring>
        <name>dof_names</name>
        <qualifiedname>robot_dart::Robot::dof_names</qualifiedname>
        <param>
          <type>bool</type>
          <declname>filter_mimics</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>filter_locked</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>filter_passive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="233" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1715" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae496e4d877d72e8c966e484366a6c97d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::mimic_dof_names</definition>
        <argsstring>() const</argsstring>
        <name>mimic_dof_names</name>
        <qualifiedname>robot_dart::Robot::mimic_dof_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="234" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1734" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1af86427627de34a6dfc730921b6848278" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::locked_dof_names</definition>
        <argsstring>() const</argsstring>
        <name>locked_dof_names</name>
        <qualifiedname>robot_dart::Robot::locked_dof_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="235" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1747" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1abe1416ee8b678c451273d33f1f880f08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::passive_dof_names</definition>
        <argsstring>() const</argsstring>
        <name>passive_dof_names</name>
        <qualifiedname>robot_dart::Robot::passive_dof_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="236" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1758" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a71bab230245f9efa71304ac0096501a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::dof_name</definition>
        <argsstring>(size_t dof_index) const</argsstring>
        <name>dof_name</name>
        <qualifiedname>robot_dart::Robot::dof_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>dof_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="237" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1769" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac30b30303e58dd80830c5aeca19e2281" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::dof_index</definition>
        <argsstring>(const std::string &amp;dof_name) const</argsstring>
        <name>dof_index</name>
        <qualifiedname>robot_dart::Robot::dof_index</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dof_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="238" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1775" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae708af458f44793ebe1e3fecfe4afd75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; robot_dart::Robot::joint_names</definition>
        <argsstring>() const</argsstring>
        <name>joint_names</name>
        <qualifiedname>robot_dart::Robot::joint_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="240" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1791" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a77d49e80c5661b7ef3c9f0b541c37ba4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::joint_name</definition>
        <argsstring>(size_t joint_index) const</argsstring>
        <name>joint_name</name>
        <qualifiedname>robot_dart::Robot::joint_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="241" column="21" bodyfile="robot_dart/robot.cpp" bodystart="1799" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0ba8cc647e4377d448f6d04b8274cd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_joint_name</definition>
        <argsstring>(size_t joint_index, const std::string &amp;joint_name)</argsstring>
        <name>set_joint_name</name>
        <qualifiedname>robot_dart::Robot::set_joint_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>joint_index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>joint_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="242" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1805" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a1a51e6b2623d3211079cf21002cdbf7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robot_dart::Robot::joint_index</definition>
        <argsstring>(const std::string &amp;joint_name) const</argsstring>
        <name>joint_index</name>
        <qualifiedname>robot_dart::Robot::joint_index</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>joint_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="243" column="16" bodyfile="robot_dart/robot.cpp" bodystart="1813" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad420e1ccd43204b6b78295106b82567d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_color_mode</definition>
        <argsstring>(const std::string &amp;color_mode)</argsstring>
        <name>set_color_mode</name>
        <qualifiedname>robot_dart::Robot::set_color_mode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>color_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="250" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1829" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a051774706cf9f0e5e31fe45f3b0b8c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_color_mode</definition>
        <argsstring>(const std::string &amp;color_mode, const std::string &amp;body_name)</argsstring>
        <name>set_color_mode</name>
        <qualifiedname>robot_dart::Robot::set_color_mode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>color_mode</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="251" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1841" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad17041d41891b54b96f99ab4ccf380d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_self_collision</definition>
        <argsstring>(bool enable_self_collisions=true, bool enable_adjacent_collisions=false)</argsstring>
        <name>set_self_collision</name>
        <qualifiedname>robot_dart::Robot::set_self_collision</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable_self_collisions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_adjacent_collisions</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="253" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1862" bodyend="1866"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a94dd74cb25a1d81d0d7d5c7728bd7257" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robot_dart::Robot::self_colliding</definition>
        <argsstring>() const</argsstring>
        <name>self_colliding</name>
        <qualifiedname>robot_dart::Robot::self_colliding</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="254" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1868" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3bf4e2a6fdba147a8543701f9c375ea9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robot_dart::Robot::adjacent_colliding</definition>
        <argsstring>() const</argsstring>
        <name>adjacent_colliding</name>
        <qualifiedname>robot_dart::Robot::adjacent_colliding</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="256" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1873" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a426801c2a0aa249267c5fc910c4f80b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_cast_shadows</definition>
        <argsstring>(bool cast_shadows=true)</argsstring>
        <name>set_cast_shadows</name>
        <qualifiedname>robot_dart::Robot::set_cast_shadows</qualifiedname>
        <param>
          <type>bool</type>
          <declname>cast_shadows</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="259" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1878" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a32c273ddeb92b1d6ebf46c761cc3db2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robot_dart::Robot::cast_shadows</definition>
        <argsstring>() const</argsstring>
        <name>cast_shadows</name>
        <qualifiedname>robot_dart::Robot::cast_shadows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="260" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1880" bodyend="1880"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a576cc19dbf9fcc1d6ecd36db4eefa28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_ghost</definition>
        <argsstring>(bool ghost=true)</argsstring>
        <name>set_ghost</name>
        <qualifiedname>robot_dart::Robot::set_ghost</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ghost</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="262" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1882" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0da31d58dd36cd926319fadc42babe1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robot_dart::Robot::ghost</definition>
        <argsstring>() const</argsstring>
        <name>ghost</name>
        <qualifiedname>robot_dart::Robot::ghost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="263" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1884" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ac589e017628a784b242b99ce4288895d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::set_draw_axis</definition>
        <argsstring>(const std::string &amp;body_name, double size=0.25)</argsstring>
        <name>set_draw_axis</name>
        <qualifiedname>robot_dart::Robot::set_draw_axis</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>size</declname>
          <defval>0.25</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="265" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1886" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a3da190dc204c38eec3400acdb9157d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::remove_all_drawing_axis</definition>
        <argsstring>()</argsstring>
        <name>remove_all_drawing_axis</name>
        <qualifiedname>robot_dart::Robot::remove_all_drawing_axis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="266" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1896" bodyend="1899"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a8eb4b8694702d51ce5423262e6ca3253" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::pair&lt; dart::dynamics::BodyNode *, double &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; std::pair&lt; dart::dynamics::BodyNode *, double &gt; &gt; &amp; robot_dart::Robot::drawing_axes</definition>
        <argsstring>() const</argsstring>
        <name>drawing_axes</name>
        <qualifiedname>robot_dart::Robot::drawing_axes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="267" column="27" bodyfile="robot_dart/robot.cpp" bodystart="1901" bodyend="1901"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1aec58a30bc8068a6ad4d0ff36a4ea132b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1Robot" kindref="compound">Robot</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Robot &gt; robot_dart::Robot::create_box</definition>
        <argsstring>(const Eigen::Vector3d &amp;dims, const Eigen::Isometry3d &amp;tf, const std::string &amp;type=&quot;free&quot;, double mass=1.0, const Eigen::Vector4d &amp;color=dart::Color::Red(1.0), const std::string &amp;box_name=&quot;box&quot;)</argsstring>
        <name>create_box</name>
        <qualifiedname>robot_dart::Robot::create_box</qualifiedname>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const Eigen::Isometry3d &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <defval>&quot;free&quot;</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>color</declname>
          <defval>dart::Color::Red(1.0)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>box_name</declname>
          <defval>&quot;box&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="270" column="32" bodyfile="robot_dart/robot.cpp" bodystart="2103" bodyend="2110"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad717a04fd3fdae7a163e16f8afe26b11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1Robot" kindref="compound">Robot</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Robot &gt; robot_dart::Robot::create_box</definition>
        <argsstring>(const Eigen::Vector3d &amp;dims, const Eigen::Vector6d &amp;pose=Eigen::Vector6d::Zero(), const std::string &amp;type=&quot;free&quot;, double mass=1.0, const Eigen::Vector4d &amp;color=dart::Color::Red(1.0), const std::string &amp;box_name=&quot;box&quot;)</argsstring>
        <name>create_box</name>
        <qualifiedname>robot_dart::Robot::create_box</qualifiedname>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>pose</declname>
          <defval>Eigen::Vector6d::Zero()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <defval>&quot;free&quot;</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>color</declname>
          <defval>dart::Color::Red(1.0)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>box_name</declname>
          <defval>&quot;box&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="275" column="32" bodyfile="robot_dart/robot.cpp" bodystart="2112" bodyend="2152"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a7cea465688cfdd2640a82addd1ec04d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1Robot" kindref="compound">Robot</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Robot &gt; robot_dart::Robot::create_ellipsoid</definition>
        <argsstring>(const Eigen::Vector3d &amp;dims, const Eigen::Isometry3d &amp;tf, const std::string &amp;type=&quot;free&quot;, double mass=1.0, const Eigen::Vector4d &amp;color=dart::Color::Red(1.0), const std::string &amp;ellipsoid_name=&quot;ellipsoid&quot;)</argsstring>
        <name>create_ellipsoid</name>
        <qualifiedname>robot_dart::Robot::create_ellipsoid</qualifiedname>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const Eigen::Isometry3d &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <defval>&quot;free&quot;</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>color</declname>
          <defval>dart::Color::Red(1.0)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ellipsoid_name</declname>
          <defval>&quot;ellipsoid&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="280" column="32" bodyfile="robot_dart/robot.cpp" bodystart="2154" bodyend="2161"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a6cdefd9c1e438ae346b3da4cd5be6a74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrobot__dart_1_1Robot" kindref="compound">Robot</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Robot &gt; robot_dart::Robot::create_ellipsoid</definition>
        <argsstring>(const Eigen::Vector3d &amp;dims, const Eigen::Vector6d &amp;pose=Eigen::Vector6d::Zero(), const std::string &amp;type=&quot;free&quot;, double mass=1.0, const Eigen::Vector4d &amp;color=dart::Color::Red(1.0), const std::string &amp;ellipsoid_name=&quot;ellipsoid&quot;)</argsstring>
        <name>create_ellipsoid</name>
        <qualifiedname>robot_dart::Robot::create_ellipsoid</qualifiedname>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>pose</declname>
          <defval>Eigen::Vector6d::Zero()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <defval>&quot;free&quot;</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>color</declname>
          <defval>dart::Color::Red(1.0)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ellipsoid_name</declname>
          <defval>&quot;ellipsoid&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="285" column="32" bodyfile="robot_dart/robot.cpp" bodystart="2163" bodyend="2203"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a665f1be94adbf0755fbac327e5e641ee" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string robot_dart::Robot::_get_path</definition>
        <argsstring>(const std::string &amp;filename) const</argsstring>
        <name>_get_path</name>
        <qualifiedname>robot_dart::Robot::_get_path</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="291" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1af94a2eb95800f854ffa4ed0ad39ac385" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::SkeletonPtr</type>
        <definition>dart::dynamics::SkeletonPtr robot_dart::Robot::_load_model</definition>
        <argsstring>(const std::string &amp;filename, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;packages=std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;(), bool is_urdf_string=false)</argsstring>
        <name>_load_model</name>
        <qualifiedname>robot_dart::Robot::_load_model</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
          <declname>packages</declname>
          <defval>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_urdf_string</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="292" column="37" bodyfile="robot_dart/robot.cpp" bodystart="1903" bodyend="1976"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1afaf8e8e64604fb5eec4a936338a0f0d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::_set_color_mode</definition>
        <argsstring>(dart::dynamics::MeshShape::ColorMode color_mode, dart::dynamics::SkeletonPtr skel)</argsstring>
        <name>_set_color_mode</name>
        <qualifiedname>robot_dart::Robot::_set_color_mode</qualifiedname>
        <param>
          <type>dart::dynamics::MeshShape::ColorMode</type>
          <declname>color_mode</declname>
        </param>
        <param>
          <type>dart::dynamics::SkeletonPtr</type>
          <declname>skel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="294" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1978" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a26125235315f5eba994332897dd2cb7d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::_set_color_mode</definition>
        <argsstring>(dart::dynamics::MeshShape::ColorMode color_mode, dart::dynamics::ShapeNode *sn)</argsstring>
        <name>_set_color_mode</name>
        <qualifiedname>robot_dart::Robot::_set_color_mode</qualifiedname>
        <param>
          <type>dart::dynamics::MeshShape::ColorMode</type>
          <declname>color_mode</declname>
        </param>
        <param>
          <type>dart::dynamics::ShapeNode *</type>
          <declname>sn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="295" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1989" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ad3dfa19a68202f41ae17c42ac7c7a2bf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::_set_actuator_type</definition>
        <argsstring>(size_t joint_index, dart::dynamics::Joint::ActuatorType type, bool override_mimic=false, bool override_base=false)</argsstring>
        <name>_set_actuator_type</name>
        <qualifiedname>robot_dart::Robot::_set_actuator_type</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>joint_index</declname>
        </param>
        <param>
          <type>dart::dynamics::Joint::ActuatorType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override_mimic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_base</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="296" column="14" bodyfile="robot_dart/robot.cpp" bodystart="1999" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1af18973483a2f76b93a2414497da202e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::_set_actuator_types</definition>
        <argsstring>(const std::vector&lt; dart::dynamics::Joint::ActuatorType &gt; &amp;types, bool override_mimic=false, bool override_base=false)</argsstring>
        <name>_set_actuator_types</name>
        <qualifiedname>robot_dart::Robot::_set_actuator_types</qualifiedname>
        <param>
          <type>const std::vector&lt; dart::dynamics::Joint::ActuatorType &gt; &amp;</type>
          <declname>types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override_mimic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_base</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="297" column="14" bodyfile="robot_dart/robot.cpp" bodystart="2012" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1adc288e62307280c8f562b2f599e23d93" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robot_dart::Robot::_set_actuator_types</definition>
        <argsstring>(dart::dynamics::Joint::ActuatorType type, bool override_mimic=false, bool override_base=false)</argsstring>
        <name>_set_actuator_types</name>
        <qualifiedname>robot_dart::Robot::_set_actuator_types</qualifiedname>
        <param>
          <type>dart::dynamics::Joint::ActuatorType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override_mimic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_base</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="298" column="14" bodyfile="robot_dart/robot.cpp" bodystart="2029" bodyend="2043"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a99ef9ccebab539f1e6c39e05a45c714f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dart::dynamics::Joint::ActuatorType</type>
        <definition>dart::dynamics::Joint::ActuatorType robot_dart::Robot::_actuator_type</definition>
        <argsstring>(size_t joint_index) const</argsstring>
        <name>_actuator_type</name>
        <qualifiedname>robot_dart::Robot::_actuator_type</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="300" column="45" bodyfile="robot_dart/robot.cpp" bodystart="2045" bodyend="2049"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a8312ecb116a656f5fc947a202ec8fa8a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; dart::dynamics::Joint::ActuatorType &gt;</type>
        <definition>std::vector&lt; dart::dynamics::Joint::ActuatorType &gt; robot_dart::Robot::_actuator_types</definition>
        <argsstring>() const</argsstring>
        <name>_actuator_types</name>
        <qualifiedname>robot_dart::Robot::_actuator_types</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="301" column="21" bodyfile="robot_dart/robot.cpp" bodystart="2051" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1acfd95d89df97a6619a1e1f467e8d49e3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::_jacobian</definition>
        <argsstring>(const Eigen::MatrixXd &amp;full_jacobian, const std::vector&lt; std::string &gt; &amp;dof_names) const</argsstring>
        <name>_jacobian</name>
        <qualifiedname>robot_dart::Robot::_jacobian</qualifiedname>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>full_jacobian</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="303" column="25" bodyfile="robot_dart/robot.cpp" bodystart="2061" bodyend="2076"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a636125413e0eced0076de0754ceed8c2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd robot_dart::Robot::_mass_matrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;full_mass_matrix, const std::vector&lt; std::string &gt; &amp;dof_names) const</argsstring>
        <name>_mass_matrix</name>
        <qualifiedname>robot_dart::Robot::_mass_matrix</qualifiedname>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>full_mass_matrix</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dof_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="304" column="25" bodyfile="robot_dart/robot.cpp" bodystart="2078" bodyend="2101"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1ae23e462cc9cfb13c40e3689f95c03e22" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void robot_dart::Robot::_post_addition</definition>
        <argsstring>(RobotDARTSimu *)</argsstring>
        <name>_post_addition</name>
        <qualifiedname>robot_dart::Robot::_post_addition</qualifiedname>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Franka_1adc31d964be12289fb561ccd761ef4ce7">_post_addition</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1ICub_1aa4d3ae3fd06c845c455be2060c46aade">_post_addition</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Iiwa_1adf5b529d7a372433ea646ad936429b66">_post_addition</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Talos_1a63bfc559d6b8f6f65a02456e1c5621a5">_post_addition</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1TalosFastCollision_1a58141d77cf10a14657888ef3e74a4931">_post_addition</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Tiago_1a6cb0fba4904c54d1f60927f489f61725">_post_addition</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Ur3e_1a1abfe1568663c2420f95507cdbc9d159">_post_addition</reimplementedby>
        <param>
          <type><ref refid="classrobot__dart_1_1RobotDARTSimu" kindref="compound">RobotDARTSimu</ref> *</type>
        </param>
        <briefdescription>
<para>Function called by <ref refid="classrobot__dart_1_1RobotDARTSimu" kindref="compound">RobotDARTSimu</ref> object when adding the robot to the world. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="307" column="22" bodyfile="robot_dart/robot.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classrobot__dart_1_1Robot_1a0e89ed18a9eb6954b7fa26bf8377c1f5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void robot_dart::Robot::_post_removal</definition>
        <argsstring>(RobotDARTSimu *)</argsstring>
        <name>_post_removal</name>
        <qualifiedname>robot_dart::Robot::_post_removal</qualifiedname>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Franka_1a4587eeb8ed9bf7aec602b25e99f0681b">_post_removal</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1ICub_1a5be9c724a958f94496496c7f15a2a0d5">_post_removal</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Iiwa_1a3448e301b0832454ffcaac83b6219fe5">_post_removal</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Talos_1a8313bda4e86f12695703e20b47a76eb4">_post_removal</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Tiago_1ad0993192fcf2ab8d3eee9d77d7133b56">_post_removal</reimplementedby>
        <reimplementedby refid="classrobot__dart_1_1robots_1_1Ur3e_1a550c362e86d18918f486f46137b6d9d4">_post_removal</reimplementedby>
        <param>
          <type><ref refid="classrobot__dart_1_1RobotDARTSimu" kindref="compound">RobotDARTSimu</ref> *</type>
        </param>
        <briefdescription>
<para>Function called by <ref refid="classrobot__dart_1_1RobotDARTSimu" kindref="compound">RobotDARTSimu</ref> object when removing the robot to the world. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/robot.hpp" line="309" column="22" bodyfile="robot_dart/robot.hpp" bodystart="309" bodyend="309"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>robot_dart::Robot</label>
        <link refid="classrobot__dart_1_1Robot"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>robot_dart::robots::A1</label>
        <link refid="classrobot__dart_1_1robots_1_1A1"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>robot_dart::robots::Arm</label>
        <link refid="classrobot__dart_1_1robots_1_1Arm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>robot_dart::robots::Franka</label>
        <link refid="classrobot__dart_1_1robots_1_1Franka"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>robot_dart::robots::Hexapod</label>
        <link refid="classrobot__dart_1_1robots_1_1Hexapod"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>robot_dart::robots::ICub</label>
        <link refid="classrobot__dart_1_1robots_1_1ICub"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>robot_dart::robots::Iiwa</label>
        <link refid="classrobot__dart_1_1robots_1_1Iiwa"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>robot_dart::robots::Pendulum</label>
        <link refid="classrobot__dart_1_1robots_1_1Pendulum"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>robot_dart::robots::Talos</label>
        <link refid="classrobot__dart_1_1robots_1_1Talos"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>robot_dart::robots::TalosFastCollision</label>
        <link refid="classrobot__dart_1_1robots_1_1TalosFastCollision"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>robot_dart::robots::TalosLight</label>
        <link refid="classrobot__dart_1_1robots_1_1TalosLight"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>robot_dart::robots::Tiago</label>
        <link refid="classrobot__dart_1_1robots_1_1Tiago"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>robot_dart::robots::Ur3e</label>
        <link refid="classrobot__dart_1_1robots_1_1Ur3e"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>robot_dart::robots::Ur3eHand</label>
        <link refid="classrobot__dart_1_1robots_1_1Ur3eHand"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>robot_dart::robots::Vx300</label>
        <link refid="classrobot__dart_1_1robots_1_1Vx300"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; Robot &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>robot_dart::Robot</label>
        <link refid="classrobot__dart_1_1Robot"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; Robot &gt;</label>
      </node>
    </collaborationgraph>
    <location file="robot_dart/robot.hpp" line="14" column="5" bodyfile="robot_dart/robot.hpp" bodystart="14" bodyend="322"/>
    <listofallmembers>
      <member refid="classrobot__dart_1_1Robot_1a99ef9ccebab539f1e6c39e05a45c714f" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_actuator_type</name></member>
      <member refid="classrobot__dart_1_1Robot_1a8312ecb116a656f5fc947a202ec8fa8a" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_actuator_types</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad719a9328fc951b31352d3bda956f060" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_axis_shapes</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0f0f858c6b833cb0892cc42131af7df4" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_cast_shadows</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5773d4df8c435f9cd4e315ff6a2bbb9e" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_controllers</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0b62de23bd5329aecc0cf2c3f0f92248" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_dof_map</name></member>
      <member refid="classrobot__dart_1_1Robot_1a665f1be94adbf0755fbac327e5e641ee" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_get_path</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa0fd0718226ceb510980270755da8c37" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_is_ghost</name></member>
      <member refid="classrobot__dart_1_1Robot_1acfd95d89df97a6619a1e1f467e8d49e3" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_jacobian</name></member>
      <member refid="classrobot__dart_1_1Robot_1a31e3a6d529f86402181ca8faa4f9e10a" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_joint_map</name></member>
      <member refid="classrobot__dart_1_1Robot_1af94a2eb95800f854ffa4ed0ad39ac385" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_load_model</name></member>
      <member refid="classrobot__dart_1_1Robot_1a636125413e0eced0076de0754ceed8c2" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_mass_matrix</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad1522c12cd8aae9cf14225b8a0d8ecd2" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_model_filename</name></member>
      <member refid="classrobot__dart_1_1Robot_1a4be59bca1835cc6075da611897994c8e" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_packages</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae23e462cc9cfb13c40e3689f95c03e22" prot="protected" virt="virtual"><scope>robot_dart::Robot</scope><name>_post_addition</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0e89ed18a9eb6954b7fa26bf8377c1f5" prot="protected" virt="virtual"><scope>robot_dart::Robot</scope><name>_post_removal</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7eaf2574b39b95c1cb61ebacded66e14" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_robot_name</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad3dfa19a68202f41ae17c42ac7c7a2bf" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_set_actuator_type</name></member>
      <member refid="classrobot__dart_1_1Robot_1af18973483a2f76b93a2414497da202e5" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_set_actuator_types</name></member>
      <member refid="classrobot__dart_1_1Robot_1adc288e62307280c8f562b2f599e23d93" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_set_actuator_types</name></member>
      <member refid="classrobot__dart_1_1Robot_1afaf8e8e64604fb5eec4a936338a0f0d2" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_set_color_mode</name></member>
      <member refid="classrobot__dart_1_1Robot_1a26125235315f5eba994332897dd2cb7d" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_set_color_mode</name></member>
      <member refid="classrobot__dart_1_1Robot_1aaf60e452285bb687d9abe7a7f525dd67" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>_skeleton</name></member>
      <member refid="classrobot__dart_1_1Robot_1a61a85723b90798b9a5666314f0841a62" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>acceleration_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a8d070ad570352588bfa864a884453af1" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>acceleration_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5e6df4bae52c3397794965e6872b4ce4" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>accelerations</name></member>
      <member refid="classrobot__dart_1_1Robot_1ab986c5e4a69fb1b425c89f90bd7f3675" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>active_controllers</name></member>
      <member refid="classrobot__dart_1_1Robot_1a00c540535540f7da302e4ddb08d1a0bb" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>actuator_type</name></member>
      <member refid="classrobot__dart_1_1Robot_1a48a5549c1a51bb1c0783e7ca89382c61" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>actuator_types</name></member>
      <member refid="classrobot__dart_1_1Robot_1adf0a2e4b493280f10bb680e00a3c3a12" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_body_mass</name></member>
      <member refid="classrobot__dart_1_1Robot_1a4e13af77c017baadc4cc12b5bb316d8d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_body_mass</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5d92a6976f10cab8ebb130a8733b72b8" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_controller</name></member>
      <member refid="classrobot__dart_1_1Robot_1a9f27eb220ea85b8253e518ac017694ce" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_external_force</name></member>
      <member refid="classrobot__dart_1_1Robot_1aaae31353f07d535864a1b9a7ca516226" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_external_force</name></member>
      <member refid="classrobot__dart_1_1Robot_1afa6f12be3ab4a7b843d947d04cfc9c10" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_external_torque</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0588daac30492a9f397a3ff706b9f745" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>add_external_torque</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3bf4e2a6fdba147a8543701f9c375ea9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>adjacent_colliding</name></member>
      <member refid="classrobot__dart_1_1Robot_1a63b2fb673184bbe16b9e64cff713faac" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>aug_mass_matrix</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad400b5495438ff50f675252425d221bc" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>base_pose</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac2cee8997e16fca8ecf238164ae369de" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>base_pose_vec</name></member>
      <member refid="classrobot__dart_1_1Robot_1a61d0a6329505a84fde05e310321fb1d1" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_acceleration</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2852e7f5d184abec877b2a18baf436b0" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_acceleration</name></member>
      <member refid="classrobot__dart_1_1Robot_1a731a45d565e8d765f9018a347fe97578" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_index</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3251994a3886a3c0ab401223bb0d8385" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_mass</name></member>
      <member refid="classrobot__dart_1_1Robot_1a01586a11da7e3f62c806bf396f5e37b0" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_mass</name></member>
      <member refid="classrobot__dart_1_1Robot_1a6fe9140834cbd491f619e4190636ed34" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_name</name></member>
      <member refid="classrobot__dart_1_1Robot_1afccd8d152f03b185940d39d04085e977" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_names</name></member>
      <member refid="classrobot__dart_1_1Robot_1a07a2eb5890d034d179aa3baf0128eb52" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_node</name></member>
      <member refid="classrobot__dart_1_1Robot_1a052221621acd6c3d2aa795d72e98a862" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_node</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad19ed209802858e53cf40aa505f0d08c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_pose</name></member>
      <member refid="classrobot__dart_1_1Robot_1a26d77ee6fa5d2b5be180442dca6a6fd0" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_pose</name></member>
      <member refid="classrobot__dart_1_1Robot_1a17e1917c748f574a80694ae13a40251e" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_pose_vec</name></member>
      <member refid="classrobot__dart_1_1Robot_1a8bcda13807b7dee0c68d7e800e7ccfe2" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_pose_vec</name></member>
      <member refid="classrobot__dart_1_1Robot_1a120256b9d6f0708e6f9a841dc7316fb6" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_velocity</name></member>
      <member refid="classrobot__dart_1_1Robot_1a76b6b797ddf0f823190bc1e0c14cca58" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>body_velocity</name></member>
      <member refid="classrobot__dart_1_1Robot_1a32c273ddeb92b1d6ebf46c761cc3db2c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>cast_shadows</name></member>
      <member refid="classrobot__dart_1_1Robot_1a076443b2c0653f4a3dd58df13891bf13" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>clear_controllers</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae32b5003e7d3b504461a4fe4baa7cb6e" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>clear_external_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2a32d54d025c294b028fe158879def77" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>clear_internal_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1a6233cc8ce4b553221b98bdb0e8e8cf82" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>clone</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2712217f6eafe6727662d39aeb566049" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>clone_ghost</name></member>
      <member refid="classrobot__dart_1_1Robot_1a9f7e3fc2c1cce48a29aec0f52271f1f5" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>com</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7f287dd32b8b66d9f9fcdebc9eb690bb" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>com_acceleration</name></member>
      <member refid="classrobot__dart_1_1Robot_1a142c88b7f5401a14158e913f2aa7896c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>com_jacobian</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad8a6eba524d58fd836d6b34a6351d01e" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>com_jacobian_deriv</name></member>
      <member refid="classrobot__dart_1_1Robot_1a474232a2fa6ebd96acc3efacb665be0d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>com_velocity</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0469631b5e07888273d593c05091567a" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>commands</name></member>
      <member refid="classrobot__dart_1_1Robot_1a952d95bc1e9bfdab9a0d415f6b3571cc" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>constraint_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1a8bd4dcb83e5325aa59b407961fe6b662" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>controller</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae717ad10036b644ce7337c085c35e1f9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>controllers</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0233af2b74143973bc06e97ecbedec32" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>coriolis_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1abcd36ccf5b5756011bd1d8a674f48942" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>coriolis_gravity_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa7cbf18b419b41e45923397e1808589d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>coulomb_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1aec58a30bc8068a6ad4d0ff36a4ea132b" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>create_box</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad717a04fd3fdae7a163e16f8afe26b11" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>create_box</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7cea465688cfdd2640a82addd1ec04d4" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>create_ellipsoid</name></member>
      <member refid="classrobot__dart_1_1Robot_1a6cdefd9c1e438ae346b3da4cd5be6a74" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>create_ellipsoid</name></member>
      <member refid="classrobot__dart_1_1Robot_1a64ffd08d23500da292755881993a78a8" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>damping_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1a78c2714622baac3af5c0ccb469f6acd3" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>dof</name></member>
      <member refid="classrobot__dart_1_1Robot_1a9b5a9c29b5070452f29938b429b425c7" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>dof</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac30b30303e58dd80830c5aeca19e2281" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>dof_index</name></member>
      <member refid="classrobot__dart_1_1Robot_1aed58ff57570013b420e932e1fa254368" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>dof_map</name></member>
      <member refid="classrobot__dart_1_1Robot_1a71bab230245f9efa71304ac0096501a8" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>dof_name</name></member>
      <member refid="classrobot__dart_1_1Robot_1a648a80792f2f14b3f190e9b07f1ce97c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>dof_names</name></member>
      <member refid="classrobot__dart_1_1Robot_1a8eb4b8694702d51ce5423262e6ca3253" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>drawing_axes</name></member>
      <member refid="classrobot__dart_1_1Robot_1a69283ec10e0e6d9abf34e87812e1325d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>external_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3e7aa6442de010a6d5e89a8311fb68ae" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>external_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa906fec013a9ef887518f73c859635a5" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>fix_to_world</name></member>
      <member refid="classrobot__dart_1_1Robot_1a6282ab081fb2a1c495d991b73d1763a9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>fixed</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa42f2e37b4d432cf5372f831a2168ea8" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>force_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1aba430bb07146219e06cbdaa7518b84c2" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>force_position_bounds</name></member>
      <member refid="classrobot__dart_1_1Robot_1afd8ff947b27f25ce8dbe7580b54ba042" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>force_torque</name></member>
      <member refid="classrobot__dart_1_1Robot_1a1352e33e735bf3351fc7d05b0f688c68" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>force_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a748cd1deb8ee9531a677a0ac18328bfe" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0cf16fdae26cdb7c023e6a9f5f5e996b" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>free</name></member>
      <member refid="classrobot__dart_1_1Robot_1ab0364e9bc9c43602a3bad67ca9b5eb97" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>free_from_world</name></member>
      <member refid="classrobot__dart_1_1Robot_1a83aac03d715c587d6e3e28ec9031a460" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae0b475c44170e78665cec05ba8a3acbc" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac32ae8aa93fdb58b8e7b6dad1979a0b7" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>friction_dir</name></member>
      <member refid="classrobot__dart_1_1Robot_1af7f3a1560a9113d44dc8a5e732c275c2" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>friction_dir</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0da31d58dd36cd926319fadc42babe1f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>ghost</name></member>
      <member refid="classrobot__dart_1_1Robot_1a4abe011424c3e775b59cd1befb959a70" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>gravity_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae8adefdbda03f635f3ce3a021603b6dd" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>inv_aug_mass_matrix</name></member>
      <member refid="classrobot__dart_1_1Robot_1a1048177099c21743442cbac9e89c789e" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>inv_mass_matrix</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3e1fae4602fb3552dd3ee6c7a2cd7b48" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>jacobian</name></member>
      <member refid="classrobot__dart_1_1Robot_1a204071a54f94f7e1ae17f37be4b40b32" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>jacobian_deriv</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5444621b7a0e594edd74d952605329ca" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>joint</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5780b86b53a8af4d34c687057304569c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>joint</name></member>
      <member refid="classrobot__dart_1_1Robot_1a1a51e6b2623d3211079cf21002cdbf7f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>joint_index</name></member>
      <member refid="classrobot__dart_1_1Robot_1a523009d233b897ace54580afef980e01" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>joint_map</name></member>
      <member refid="classrobot__dart_1_1Robot_1a77d49e80c5661b7ef3c9f0b541c37ba4" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>joint_name</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae708af458f44793ebe1e3fecfe4afd75" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>joint_names</name></member>
      <member refid="classrobot__dart_1_1Robot_1af86427627de34a6dfc730921b6848278" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>locked_dof_names</name></member>
      <member refid="classrobot__dart_1_1Robot_1a42462001f1993ce3aa1689d12d2befc9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>mass_matrix</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae496e4d877d72e8c966e484366a6c97d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>mimic_dof_names</name></member>
      <member refid="classrobot__dart_1_1Robot_1a15d6d6496b8dc22936dfed2af0cc05de" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>model_filename</name></member>
      <member refid="classrobot__dart_1_1Robot_1a54c3fa173f04715ddf8c29da55759e59" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>model_packages</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad6eb5953c1040ae68768cbee13a6d225" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>name</name></member>
      <member refid="classrobot__dart_1_1Robot_1a61449b01547ebee00294adb7e8467239" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>num_bodies</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa35dc7d0113cad92abb3ca27bd0766f7" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>num_controllers</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0e78d17261ed90dd9e74d11f92f163be" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>num_dofs</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad178003f8bb4df47a69d28a19b737a4c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>num_joints</name></member>
      <member refid="classrobot__dart_1_1Robot_1abe1416ee8b678c451273d33f1f880f08" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>passive_dof_names</name></member>
      <member refid="classrobot__dart_1_1Robot_1addc09ef4a38f71cbbbd3167326b00536" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>position_enforced</name></member>
      <member refid="classrobot__dart_1_1Robot_1a421bf15e4d78135c6e099ec947b4b667" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>position_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2a1af9d70b7bf58d7670f37e40967978" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>position_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a35c4091c282e0ea99658c8ae23882e64" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>positions</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae876113c3a85a5f4c97a4d144559ef4d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>reinit_controllers</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3da190dc204c38eec3400acdb9157d64" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>remove_all_drawing_axis</name></member>
      <member refid="classrobot__dart_1_1Robot_1aade72f2b4bf8b9e4c12e7ca7c7156ec6" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>remove_controller</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7840ab10ee5b477ac4ec0d4d7c7f3170" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>remove_controller</name></member>
      <member refid="classrobot__dart_1_1Robot_1a96af674783970d47996056c4ead16f1d" prot="public" virt="virtual"><scope>robot_dart::Robot</scope><name>reset</name></member>
      <member refid="classrobot__dart_1_1Robot_1a72146fe8cfb5566d4f48c083bdf5b210" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>reset_commands</name></member>
      <member refid="classrobot__dart_1_1Robot_1a67852b8ab835534332cae31a5d7ef8b3" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>restitution_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1a38c8fc8b21ada64c3d6fb53a07469cf9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>restitution_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1a09f2520d1ec08fe65d517dcf94535747" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>Robot</name></member>
      <member refid="classrobot__dart_1_1Robot_1a19c4446d0f25c95738c021a4e59427f9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>Robot</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac3040b65c60460920428f63e9acd6643" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>Robot</name></member>
      <member refid="classrobot__dart_1_1Robot_1a655d18b872175815db814ef7f25117d5" prot="protected" virt="non-virtual"><scope>robot_dart::Robot</scope><name>RobotDARTSimu</name></member>
      <member refid="classrobot__dart_1_1Robot_1a385f5ae6bdded9f1a2700db664f8f74f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>secondary_friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1a67025eded02f4b33c480e4316c4a5fcf" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>secondary_friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1a94dd74cb25a1d81d0d7d5c7728bd7257" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>self_colliding</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac64b16f56fecb1dec98b6ce09aa7461b" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_acceleration_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a6e3256e13d7b59aa20dd2e8c0518191c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_acceleration_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7b1e6a847335419f9b4e146b7963dc42" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_accelerations</name></member>
      <member refid="classrobot__dart_1_1Robot_1aae1ec1a7844e28b7a6ddc64682917d04" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_actuator_type</name></member>
      <member refid="classrobot__dart_1_1Robot_1abadb19f0b48f7de9617aaf2f59ec2675" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_actuator_types</name></member>
      <member refid="classrobot__dart_1_1Robot_1a86f3346f48c41394a8af7457f3d63ff0" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_base_pose</name></member>
      <member refid="classrobot__dart_1_1Robot_1a4941fd995efaabe54488281c9f8dd1a2" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_base_pose</name></member>
      <member refid="classrobot__dart_1_1Robot_1ada98abb4811cc772040e39bd08245b5b" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_body_mass</name></member>
      <member refid="classrobot__dart_1_1Robot_1a023916d85fc4a50a8348c92a48a8defa" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_body_mass</name></member>
      <member refid="classrobot__dart_1_1Robot_1a099c64842ed4b1935817cbbb7adc812d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_body_name</name></member>
      <member refid="classrobot__dart_1_1Robot_1a426801c2a0aa249267c5fc910c4f80b2" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_cast_shadows</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad420e1ccd43204b6b78295106b82567d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_color_mode</name></member>
      <member refid="classrobot__dart_1_1Robot_1a051774706cf9f0e5e31fe45f3b0b8c9b" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_color_mode</name></member>
      <member refid="classrobot__dart_1_1Robot_1ab1f41044b73068c6cb685f03b268a4ec" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_commands</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2bb5d3ba1108fd9ae1ceca498dfd1a20" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_coulomb_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3992616f6eb4866cdf7a75b7bf84ee00" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_coulomb_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa7c6b33471f4fb725b5dca3e73fbdaaa" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_damping_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0c245a940ddb2ac242c350a080d86422" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_damping_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac589e017628a784b242b99ce4288895d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_draw_axis</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5b2d8f51cb243d4d063aba6a8ae16d8b" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_external_force</name></member>
      <member refid="classrobot__dart_1_1Robot_1a4ccb2241fa1be81f24ce30242a33d2f2" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_external_force</name></member>
      <member refid="classrobot__dart_1_1Robot_1af39c094130f6ff89b5c60175b48d2e88" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_external_torque</name></member>
      <member refid="classrobot__dart_1_1Robot_1afb038299911a52d927d80f59aec8f9b3" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_external_torque</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3210cc606857712b370dbad83b4d0c7e" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_force_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0d954f7893114d8cba8c4b28a1329bc3" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_force_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac1cb736079db2c3c7cf959a5d1054f3a" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_forces</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac14e86971cfd0c3a9994c80012ec3287" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1a634a4509c2e336b394e6c0ae67f781ff" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad178f94548cb3c9b1628cc0e5d3ae737" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_friction_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1a04b9d1b06be744be5df80b1e5cd4cdbb" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_friction_dir</name></member>
      <member refid="classrobot__dart_1_1Robot_1ac5d8e880cb1a4ffab5da4f95ee9f481f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_friction_dir</name></member>
      <member refid="classrobot__dart_1_1Robot_1a576cc19dbf9fcc1d6ecd36db4eefa28f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_ghost</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0ba8cc647e4377d448f6d04b8274cd5f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_joint_name</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7c61be2f9030a7eb030899d01f6f0c1d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_mimic</name></member>
      <member refid="classrobot__dart_1_1Robot_1aabe0ce110443bbf7edc9e3cbb4b206f0" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_position_enforced</name></member>
      <member refid="classrobot__dart_1_1Robot_1a03107a2acedf29d9125265e5515aec67" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_position_enforced</name></member>
      <member refid="classrobot__dart_1_1Robot_1af89cffc9ac317ac2d0d4490c66817921" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_position_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a1c01a0683952e842cc55b6b96d1e4697" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_position_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a45bff48126acf1c3b1440053408eda7d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_positions</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad649f474ec7ea7390c1f2ae143988b4c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_restitution_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1aeac33d4b4f153d10ae32763ccafa5e96" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_restitution_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3ce18d0787ba9e40e45eaed02fdeb31a" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_restitution_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2a9d2e74efb4833f7d5a0e2df9725511" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_secondary_friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1ab8a0b5b47a86fce8b73a0458112c2e7e" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_secondary_friction_coeff</name></member>
      <member refid="classrobot__dart_1_1Robot_1ab42cc7938f120692e9194e0f3a01631c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_secondary_friction_coeffs</name></member>
      <member refid="classrobot__dart_1_1Robot_1ad17041d41891b54b96f99ab4ccf380d9" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_self_collision</name></member>
      <member refid="classrobot__dart_1_1Robot_1a6e252fde5240760f124cfd4deffb70e0" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_spring_stiffnesses</name></member>
      <member refid="classrobot__dart_1_1Robot_1ae6933d0a210ce69675a6cf730850306c" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_spring_stiffnesses</name></member>
      <member refid="classrobot__dart_1_1Robot_1a7e1a2418605dba9850c77b440fe7de9f" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_velocities</name></member>
      <member refid="classrobot__dart_1_1Robot_1a3b7f4c92aef9ed078f4d76c92238ff35" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_velocity_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a0e79dee604da70322160164799ddd086" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>set_velocity_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a68e3847796190e75682d963189f4b82d" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>skeleton</name></member>
      <member refid="classrobot__dart_1_1Robot_1aa05256ac963fa4282ed6ba13fc7aa13a" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>spring_stiffnesses</name></member>
      <member refid="classrobot__dart_1_1Robot_1abf23bd42f3dd209a0950697f54921707" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>update</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2d5700673de40eece09188ab445b8833" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>update_joint_dof_maps</name></member>
      <member refid="classrobot__dart_1_1Robot_1a9b7cf7ba649853067163c21dc92c6df1" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>vec_dof</name></member>
      <member refid="classrobot__dart_1_1Robot_1a814e4c94ef50f8295d95ada6c4322366" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>velocities</name></member>
      <member refid="classrobot__dart_1_1Robot_1a2643cd261364ca54d1438bef11a9aabd" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>velocity_lower_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1a5d31f1b79e3ca556421546d14f49dc35" prot="public" virt="non-virtual"><scope>robot_dart::Robot</scope><name>velocity_upper_limits</name></member>
      <member refid="classrobot__dart_1_1Robot_1ab1b72ace13d18ba2f3cb7a8b9d9f1b53" prot="public" virt="virtual"><scope>robot_dart::Robot</scope><name>~Robot</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
