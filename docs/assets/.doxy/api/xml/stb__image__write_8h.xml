<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="stb__image__write_8h" kind="file" language="C++">
    <compoundname>stb_image_write.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includedby refid="helper_8cpp" local="yes">robot_dart/gui/helper.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>robot_dart/gui/stb_image_write.h</label>
        <link refid="stb__image__write_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="stb__image__write_8h_1a1d964457ebf7cc898b8cb14e66cbfaa8" prot="public" static="no">
        <name>STBIWDEF</name>
        <initializer>extern</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="165" column="11" bodyfile="robot_dart/gui/stb_image_write.h" bodystart="165" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stb__image__write_8h_1a2326fd2fd79095b9ef34695a0bda114f" prot="public" static="no">
        <type>void</type>
        <definition>typedef void stbi_write_func(void *context, void *data, int size)</definition>
        <argsstring>(void *context, void *data, int size)</argsstring>
        <name>stbi_write_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="188" column="14" bodyfile="robot_dart/gui/stb_image_write.h" bodystart="188" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="stb__image__write_8h_1a7aa69838d830bd1e917b2a20d2030e0c" prot="public" static="no" extern="yes" mutable="no">
        <type>int</type>
        <definition>int stbi_write_tga_with_rle</definition>
        <argsstring></argsstring>
        <name>stbi_write_tga_with_rle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="171" column="12" declfile="robot_dart/gui/stb_image_write.h" declline="171" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image__write_8h_1ac40d349d241f781ed7b621259ce2b3c2" prot="public" static="no" extern="yes" mutable="no">
        <type>int</type>
        <definition>int stbi_write_png_compression_level</definition>
        <argsstring></argsstring>
        <name>stbi_write_png_compression_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="172" column="12" declfile="robot_dart/gui/stb_image_write.h" declline="172" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image__write_8h_1acfc7bbb01f0c4f6079727cfa1b086912" prot="public" static="no" extern="yes" mutable="no">
        <type>int</type>
        <definition>int stbi_write_force_png_filter</definition>
        <argsstring></argsstring>
        <name>stbi_write_force_png_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="173" column="12" declfile="robot_dart/gui/stb_image_write.h" declline="173" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="stb__image__write_8h_1a9c03e5171f6aea47fde6dafcf3249ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_png</definition>
        <argsstring>(char const *filename, int w, int h, int comp, const void *data, int stride_in_bytes)</argsstring>
        <name>stbi_write_png</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_in_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="177" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="177" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1a4f63ec842984e5db3edf2da89f16038e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_bmp</definition>
        <argsstring>(char const *filename, int w, int h, int comp, const void *data)</argsstring>
        <name>stbi_write_bmp</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="178" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="178" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1ab7a84427c6d7e894090fbeae3bc8f6da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_tga</definition>
        <argsstring>(char const *filename, int w, int h, int comp, const void *data)</argsstring>
        <name>stbi_write_tga</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="179" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="179" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1a21f22be0194761e08b682ed543ef6161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_hdr</definition>
        <argsstring>(char const *filename, int w, int h, int comp, const float *data)</argsstring>
        <name>stbi_write_hdr</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="180" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="180" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1a41048e8f918179d2788284ef9cc2590c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_jpg</definition>
        <argsstring>(char const *filename, int x, int y, int comp, const void *data, int quality)</argsstring>
        <name>stbi_write_jpg</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="181" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="181" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1a72dcd18698d64c92082449912c39a4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_png_to_func</definition>
        <argsstring>(stbi_write_func *func, void *context, int w, int h, int comp, const void *data, int stride_in_bytes)</argsstring>
        <name>stbi_write_png_to_func</name>
        <param>
          <type>stbi_write_func *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_in_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="190" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="190" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1aca9573665994b2244a6a045b2a1df1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_bmp_to_func</definition>
        <argsstring>(stbi_write_func *func, void *context, int w, int h, int comp, const void *data)</argsstring>
        <name>stbi_write_bmp_to_func</name>
        <param>
          <type>stbi_write_func *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="191" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="191" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1a5e5c6483c1d45a65fe208f52937cd315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_tga_to_func</definition>
        <argsstring>(stbi_write_func *func, void *context, int w, int h, int comp, const void *data)</argsstring>
        <name>stbi_write_tga_to_func</name>
        <param>
          <type>stbi_write_func *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="192" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="192" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1ac9214f775162b61a3503c76875966c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_hdr_to_func</definition>
        <argsstring>(stbi_write_func *func, void *context, int w, int h, int comp, const float *data)</argsstring>
        <name>stbi_write_hdr_to_func</name>
        <param>
          <type>stbi_write_func *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="193" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="193" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1afbe60a9afbcbd6d54f98f72afd46a676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF int</type>
        <definition>STBIWDEF int stbi_write_jpg_to_func</definition>
        <argsstring>(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)</argsstring>
        <name>stbi_write_jpg_to_func</name>
        <param>
          <type>stbi_write_func *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="194" column="14" declfile="robot_dart/gui/stb_image_write.h" declline="194" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image__write_8h_1a5c41a5d16dc665edd2489b982ba29b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBIWDEF void</type>
        <definition>STBIWDEF void stbi_flip_vertically_on_write</definition>
        <argsstring>(int flip_boolean)</argsstring>
        <name>stbi_flip_vertically_on_write</name>
        <param>
          <type>int</type>
          <declname>flip_boolean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robot_dart/gui/stb_image_write.h" line="196" column="15" declfile="robot_dart/gui/stb_image_write.h" declline="196" declcolumn="15"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>stb_image_write<sp/>-<sp/>v1.13<sp/>-<sp/>public<sp/>domain<sp/>-<sp/>http://nothings.org/stb</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>writes<sp/>out<sp/>PNG/BMP/TGA/JPEG/HDR<sp/>images<sp/>to<sp/>C<sp/>stdio<sp/>-<sp/>Sean<sp/>Barrett<sp/>2010-2015</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>warranty<sp/>implied;<sp/>use<sp/>at<sp/>your<sp/>own<sp/>risk</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>Before<sp/>#including,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_IMAGE_WRITE_IMPLEMENTATION</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>file<sp/>that<sp/>you<sp/>want<sp/>to<sp/>have<sp/>the<sp/>implementation.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>Will<sp/>probably<sp/>not<sp/>work<sp/>correctly<sp/>with<sp/>strict-aliasing<sp/>optimizations.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">ABOUT:</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/>This<sp/>header<sp/>file<sp/>is<sp/>a<sp/>library<sp/>for<sp/>writing<sp/>images<sp/>to<sp/>C<sp/>stdio<sp/>or<sp/>a<sp/>callback.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>The<sp/>PNG<sp/>output<sp/>is<sp/>not<sp/>optimal;<sp/>it<sp/>is<sp/>20-50%<sp/>larger<sp/>than<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>written<sp/>by<sp/>a<sp/>decent<sp/>optimizing<sp/>implementation;<sp/>though<sp/>providing<sp/>a<sp/>custom</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/>zlib<sp/>compress<sp/>function<sp/>(see<sp/>STBIW_ZLIB_COMPRESS)<sp/>can<sp/>mitigate<sp/>that.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>designed<sp/>for<sp/>source<sp/>code<sp/>compactness<sp/>and<sp/>simplicity,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>not<sp/>optimal<sp/>image<sp/>file<sp/>size<sp/>or<sp/>run-time<sp/>performance.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">BUILDING:</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>#define<sp/>STBIW_ASSERT(x)<sp/>before<sp/>the<sp/>#include<sp/>to<sp/>avoid<sp/>using<sp/>assert.h.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>#define<sp/>STBIW_MALLOC(),<sp/>STBIW_REALLOC(),<sp/>and<sp/>STBIW_FREE()<sp/>to<sp/>replace</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>malloc,realloc,free.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>#define<sp/>STBIW_MEMMOVE()<sp/>to<sp/>replace<sp/>memmove()</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>#define<sp/>STBIW_ZLIB_COMPRESS<sp/>to<sp/>use<sp/>a<sp/>custom<sp/>zlib-style<sp/>compress<sp/>function</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>for<sp/>PNG<sp/>compression<sp/>(instead<sp/>of<sp/>the<sp/>builtin<sp/>one),<sp/>it<sp/>must<sp/>have<sp/>the<sp/>following<sp/>signature:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>unsigned<sp/>char<sp/>*<sp/>my_compress(unsigned<sp/>char<sp/>*data,<sp/>int<sp/>data_len,<sp/>int<sp/>*out_len,<sp/>int<sp/>quality);</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>The<sp/>returned<sp/>data<sp/>will<sp/>be<sp/>freed<sp/>with<sp/>STBIW_FREE()<sp/>(free()<sp/>by<sp/>default),</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>so<sp/>it<sp/>must<sp/>be<sp/>heap<sp/>allocated<sp/>with<sp/>STBIW_MALLOC()<sp/>(malloc()<sp/>by<sp/>default),</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment">UNICODE:</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>If<sp/>compiling<sp/>for<sp/>Windows<sp/>and<sp/>you<sp/>wish<sp/>to<sp/>use<sp/>Unicode<sp/>filenames,<sp/>compile</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>with</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STBIW_WINDOWS_UTF8</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>and<sp/>pass<sp/>utf8-encoded<sp/>filenames.<sp/>Call<sp/>stbiw_convert_wchar_to_utf8<sp/>to<sp/>convert</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>Windows<sp/>wchar_t<sp/>filenames<sp/>to<sp/>utf8.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">USAGE:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>There<sp/>are<sp/>five<sp/>functions,<sp/>one<sp/>for<sp/>each<sp/>image<sp/>file<sp/>format:</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_png(char<sp/>const<sp/>*filename,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/>*data,<sp/>int<sp/>stride_in_bytes);</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_bmp(char<sp/>const<sp/>*filename,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/>*data);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_tga(char<sp/>const<sp/>*filename,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/>*data);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_jpg(char<sp/>const<sp/>*filename,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/>*data,<sp/>int<sp/>quality);</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_hdr(char<sp/>const<sp/>*filename,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>float<sp/>*data);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>void<sp/>stbi_flip_vertically_on_write(int<sp/>flag);<sp/>//<sp/>flag<sp/>is<sp/>non-zero<sp/>to<sp/>flip<sp/>data<sp/>vertically</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>There<sp/>are<sp/>also<sp/>five<sp/>equivalent<sp/>functions<sp/>that<sp/>use<sp/>an<sp/>arbitrary<sp/>write<sp/>function.<sp/>You<sp/>are</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>expected<sp/>to<sp/>open/close<sp/>your<sp/>file-equivalent<sp/>before<sp/>and<sp/>after<sp/>calling<sp/>these:</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_png_to_func(stbi_write_func<sp/>*func,<sp/>void<sp/>*context,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/><sp/>*data,<sp/>int<sp/>stride_in_bytes);</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_bmp_to_func(stbi_write_func<sp/>*func,<sp/>void<sp/>*context,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/><sp/>*data);</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_tga_to_func(stbi_write_func<sp/>*func,<sp/>void<sp/>*context,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/><sp/>*data);</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_hdr_to_func(stbi_write_func<sp/>*func,<sp/>void<sp/>*context,<sp/>int<sp/>w,<sp/>int<sp/>h,<sp/>int<sp/>comp,<sp/>const<sp/>float<sp/>*data);</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_jpg_to_func(stbi_write_func<sp/>*func,<sp/>void<sp/>*context,<sp/>int<sp/>x,<sp/>int<sp/>y,<sp/>int<sp/>comp,<sp/>const<sp/>void<sp/>*data,<sp/>int<sp/>quality);</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>where<sp/>the<sp/>callback<sp/>is:</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>stbi_write_func(void<sp/>*context,<sp/>void<sp/>*data,<sp/>int<sp/>size);</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>configure<sp/>it<sp/>with<sp/>these<sp/>global<sp/>variables:</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_tga_with_rle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>defaults<sp/>to<sp/>true;<sp/>set<sp/>to<sp/>0<sp/>to<sp/>disable<sp/>RLE</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_png_compression_level;<sp/><sp/><sp/><sp/>//<sp/>defaults<sp/>to<sp/>8;<sp/>set<sp/>to<sp/>higher<sp/>for<sp/>more<sp/>compression</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>stbi_write_force_png_filter;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>defaults<sp/>to<sp/>-1;<sp/>set<sp/>to<sp/>0..5<sp/>to<sp/>force<sp/>a<sp/>filter<sp/>mode</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>define<sp/>STBI_WRITE_NO_STDIO<sp/>to<sp/>disable<sp/>the<sp/>file<sp/>variant<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>functions,<sp/>so<sp/>the<sp/>library<sp/>will<sp/>not<sp/>use<sp/>stdio.h<sp/>at<sp/>all.<sp/>However,<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>also<sp/>disable<sp/>HDR<sp/>writing,<sp/>because<sp/>it<sp/>requires<sp/>stdio<sp/>for<sp/>formatted<sp/>output.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>Each<sp/>function<sp/>returns<sp/>0<sp/>on<sp/>failure<sp/>and<sp/>non-0<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/>The<sp/>functions<sp/>create<sp/>an<sp/>image<sp/>file<sp/>defined<sp/>by<sp/>the<sp/>parameters.<sp/>The<sp/>image</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>is<sp/>a<sp/>rectangle<sp/>of<sp/>pixels<sp/>stored<sp/>from<sp/>left-to-right,<sp/>top-to-bottom.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>Each<sp/>pixel<sp/>contains<sp/>&apos;comp&apos;<sp/>channels<sp/>of<sp/>data<sp/>stored<sp/>interleaved<sp/>with<sp/>8-bits</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>per<sp/>channel,<sp/>in<sp/>the<sp/>following<sp/>order:<sp/>1=Y,<sp/>2=YA,<sp/>3=RGB,<sp/>4=RGBA.<sp/>(Y<sp/>is</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>monochrome<sp/>color.)<sp/>The<sp/>rectangle<sp/>is<sp/>&apos;w&apos;<sp/>pixels<sp/>wide<sp/>and<sp/>&apos;h&apos;<sp/>pixels<sp/>tall.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>The<sp/>*data<sp/>pointer<sp/>points<sp/>to<sp/>the<sp/>first<sp/>byte<sp/>of<sp/>the<sp/>top-left-most<sp/>pixel.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>For<sp/>PNG,<sp/>&quot;stride_in_bytes&quot;<sp/>is<sp/>the<sp/>distance<sp/>in<sp/>bytes<sp/>from<sp/>the<sp/>first<sp/>byte<sp/>of</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>a<sp/>row<sp/>of<sp/>pixels<sp/>to<sp/>the<sp/>first<sp/>byte<sp/>of<sp/>the<sp/>next<sp/>row<sp/>of<sp/>pixels.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>PNG<sp/>creates<sp/>output<sp/>files<sp/>with<sp/>the<sp/>same<sp/>number<sp/>of<sp/>components<sp/>as<sp/>the<sp/>input.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>The<sp/>BMP<sp/>format<sp/>expands<sp/>Y<sp/>to<sp/>RGB<sp/>in<sp/>the<sp/>file<sp/>format<sp/>and<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>output<sp/>alpha.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>PNG<sp/>supports<sp/>writing<sp/>rectangles<sp/>of<sp/>data<sp/>even<sp/>when<sp/>the<sp/>bytes<sp/>storing<sp/>rows<sp/>of</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>data<sp/>are<sp/>not<sp/>consecutive<sp/>in<sp/>memory<sp/>(e.g.<sp/>sub-rectangles<sp/>of<sp/>a<sp/>larger<sp/>image),</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>by<sp/>supplying<sp/>the<sp/>stride<sp/>between<sp/>the<sp/>beginning<sp/>of<sp/>adjacent<sp/>rows.<sp/>The<sp/>other</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>formats<sp/>do<sp/>not.<sp/>(Thus<sp/>you<sp/>cannot<sp/>write<sp/>a<sp/>native-format<sp/>BMP<sp/>through<sp/>the<sp/>BMP</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>writer,<sp/>both<sp/>because<sp/>it<sp/>is<sp/>in<sp/>BGR<sp/>order<sp/>and<sp/>because<sp/>it<sp/>may<sp/>have<sp/>padding</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line.)</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>PNG<sp/>allows<sp/>you<sp/>to<sp/>set<sp/>the<sp/>deflate<sp/>compression<sp/>level<sp/>by<sp/>setting<sp/>the<sp/>global</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>variable<sp/>&apos;stbi_write_png_compression_level&apos;<sp/>(it<sp/>defaults<sp/>to<sp/>8).</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>HDR<sp/>expects<sp/>linear<sp/>float<sp/>data.<sp/>Since<sp/>the<sp/>format<sp/>is<sp/>always<sp/>32-bit<sp/>rgb(e)</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>data,<sp/>alpha<sp/>(if<sp/>provided)<sp/>is<sp/>discarded,<sp/>and<sp/>for<sp/>monochrome<sp/>data<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>replicated<sp/>across<sp/>all<sp/>three<sp/>channels.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>TGA<sp/>supports<sp/>RLE<sp/>or<sp/>non-RLE<sp/>compressed<sp/>data.<sp/>To<sp/>use<sp/>non-RLE-compressed</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>data,<sp/>set<sp/>the<sp/>global<sp/>variable<sp/>&apos;stbi_write_tga_with_rle&apos;<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>JPEG<sp/>does<sp/>ignore<sp/>alpha<sp/>channels<sp/>in<sp/>input<sp/>data;<sp/>quality<sp/>is<sp/>between<sp/>1<sp/>and<sp/>100.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>Higher<sp/>quality<sp/>looks<sp/>better<sp/>but<sp/>results<sp/>in<sp/>a<sp/>bigger<sp/>image.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>JPEG<sp/>baseline<sp/>(no<sp/>JPEG<sp/>progressive).</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">CREDITS:</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>Sean<sp/>Barrett<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>PNG/BMP/TGA<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>Baldur<sp/>Karlsson<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>HDR</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>Jean-Sebastien<sp/>Guay<sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>TGA<sp/>monochrome</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>Tim<sp/>Kelsey<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>misc<sp/>enhancements</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>Alan<sp/>Hickman<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>TGA<sp/>RLE</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>Emmanuel<sp/>Julien<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>initial<sp/>file<sp/>IO<sp/>callback<sp/>implementation</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>Jon<sp/>Olick<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>original<sp/>jo_jpeg.cpp<sp/>code</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>Daniel<sp/>Gibson<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>integrate<sp/>JPEG,<sp/>allow<sp/>external<sp/>zlib</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>Aarni<sp/>Koskela<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/><sp/>allow<sp/>choosing<sp/>PNG<sp/>filter</highlight></codeline>
<codeline lineno="125"><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/>bugfixes:</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>github:Chribba</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Guillaume<sp/>Chereau</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>github:jry2</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>github:romigrou</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Sergio<sp/>Gonzalez</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Jonas<sp/>Karlsson</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Filip<sp/>Wasil</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Thatcher<sp/>Ulrich</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>github:poppolopoppo</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Patrick<sp/>Boettcher</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>github:xeekworx</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Cap<sp/>Petschulat</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Simon<sp/>Rodriguez</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Ivan<sp/>Tikhonov</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>github:ignotion</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Adam<sp/>Schackart</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">LICENSE</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>See<sp/>end<sp/>of<sp/>file<sp/>for<sp/>license<sp/>information.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>system_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_STB_IMAGE_WRITE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_STB_IMAGE_WRITE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>STB_IMAGE_WRITE_STATIC<sp/>causes<sp/>problems,<sp/>try<sp/>defining<sp/>STBIWDEF<sp/>to<sp/>&apos;inline&apos;<sp/>or<sp/>&apos;static<sp/>inline&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBIWDEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_IMAGE_WRITE_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIWDEF<sp/><sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIWDEF<sp/><sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIWDEF<sp/><sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_IMAGE_WRITE_STATIC<sp/><sp/></highlight><highlight class="comment">//<sp/>C++<sp/>forbids<sp/>static<sp/>forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga_with_rle;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png_compression_level;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_force_png_filter;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_in_bytes);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_bmp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_hdr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_jpg(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_WINDOWS_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw_convert_wchar_to_utf8(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferlen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>input);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_write_func(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_in_bytes);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_bmp_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_hdr_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_jpg_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_flip_vertically_on_write(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flip_boolean);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//INCLUDE_STB_IMAGE_WRITE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_IMAGE_WRITE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_CRT_NONSTDC_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>_CRT_NONSTDC_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STBIW_MALLOC)<sp/>&amp;&amp;<sp/>defined(STBIW_FREE)<sp/>&amp;&amp;<sp/>(defined(STBIW_REALLOC)<sp/>||<sp/>defined(STBIW_REALLOC_SIZED))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(STBIW_MALLOC)<sp/>&amp;&amp;<sp/>!defined(STBIW_FREE)<sp/>&amp;&amp;<sp/>!defined(STBIW_REALLOC)<sp/>&amp;&amp;<sp/>!defined(STBIW_REALLOC_SIZED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Must<sp/>define<sp/>all<sp/>or<sp/>none<sp/>of<sp/>STBIW_MALLOC,<sp/>STBIW_FREE,<sp/>and<sp/>STBIW_REALLOC<sp/>(or<sp/>STBIW_REALLOC_SIZED).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBIW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_MALLOC(sz)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(sz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_REALLOC(p,newsz)<sp/><sp/>realloc(p,newsz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_FREE(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBIW_REALLOC_SIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_REALLOC_SIZED(p,oldsz,newsz)<sp/>STBIW_REALLOC(p,newsz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBIW_MEMMOVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_MEMMOVE(a,b,sz)<sp/>memmove(a,b,sz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBIW_ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_ASSERT(x)<sp/>assert(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_UCHAR(x)<sp/>(unsigned<sp/>char)<sp/>((x)<sp/>&amp;<sp/>0xff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_IMAGE_WRITE_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi__flip_vertically_on_write=0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png_compression_level<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga_with_rle<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_force_png_filter<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png_compression_level<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi__flip_vertically_on_write=0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga_with_rle<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_force_png_filter<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_flip_vertically_on_write(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>stbi__flip_vertically_on_write<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>stbi_write_func<sp/>*func;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}<sp/>stbi__write_context;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialize<sp/>a<sp/>callback-based<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi__start_write_callbacks(stbi__write_context<sp/>*s,<sp/>stbi_write_func<sp/>*c,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func<sp/><sp/><sp/><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/>s-&gt;context<sp/>=<sp/>context;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi__stdio_write(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/>fwrite(data,1,size,(FILE*)<sp/>context);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(STBI_WINDOWS_UTF8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_EXTERN<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIW_EXTERN<sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">STBIW_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>MultiByteToWideChar(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cbmb,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*widestr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cchwide);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">STBIW_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>WideCharToMultiByte(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*widestr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cchwide,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cbmb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*defchar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*used_default);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw_convert_wchar_to_utf8(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferlen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>input)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WideCharToMultiByte(65001<sp/></highlight><highlight class="comment">/*<sp/>UTF8<sp/>*/</highlight><highlight class="normal">,<sp/>0,<sp/>input,<sp/>-1,<sp/>buffer,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>bufferlen,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*stbiw__fopen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(STBI_WINDOWS_UTF8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wMode[64];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wFilename[1024];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>MultiByteToWideChar(65001<sp/></highlight><highlight class="comment">/*<sp/>UTF8<sp/>*/</highlight><highlight class="normal">,<sp/>0,<sp/>filename,<sp/>-1,<sp/>wFilename,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wFilename)))</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>MultiByteToWideChar(65001<sp/></highlight><highlight class="comment">/*<sp/>UTF8<sp/>*/</highlight><highlight class="normal">,<sp/>0,<sp/>mode,<sp/>-1,<sp/>wMode,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wMode)))</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>_wfopen_s(&amp;f,<sp/>wFilename,<sp/>wMode))</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>_wfopen(wFilename,<sp/>wMode);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>fopen_s(&amp;f,<sp/>filename,<sp/>mode))</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f=0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>fopen(filename,<sp/>mode);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi__start_write_file(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stbiw__fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>stbi__start_write_callbacks(s,<sp/>stbi__stdio_write,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>f);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi__end_write_file(stbi__write_context<sp/>*s)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>fclose((FILE<sp/>*)s-&gt;context);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw_uint32;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_image_write_test[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stbiw_uint32)==4<sp/>?<sp/>1<sp/>:<sp/>-1];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__writefv(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>v)</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fmt)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*fmt++)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">:<sp/>{<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>STBIW_UCHAR(va_arg(v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,&amp;x,1);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>va_arg(v,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[2];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[0]<sp/>=<sp/>STBIW_UCHAR(x);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1]<sp/>=<sp/>STBIW_UCHAR(x&gt;&gt;8);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,b,2);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">:<sp/>{<sp/>stbiw_uint32<sp/>x<sp/>=<sp/>va_arg(v,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[4];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[0]=STBIW_UCHAR(x);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1]=STBIW_UCHAR(x&gt;&gt;8);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[2]=STBIW_UCHAR(x&gt;&gt;16);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[3]=STBIW_UCHAR(x&gt;&gt;24);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,b,4);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIW_ASSERT(0);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__writef(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/>va_start(v,<sp/>fmt);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/>stbiw__writefv(s,<sp/>fmt,<sp/>v);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__putc(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__write3(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arr[3];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>arr[0]<sp/>=<sp/>a;<sp/>arr[1]<sp/>=<sp/>b;<sp/>arr[2]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>arr,<sp/>3);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__write_pixel(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rgb_dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_mono,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bg[3]<sp/>=<sp/>{<sp/>255,<sp/>0,<sp/>255},<sp/>px[3];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_alpha<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;d[comp<sp/>-<sp/>1],<sp/>1);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(comp)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>2<sp/>pixels<sp/>=<sp/>mono<sp/>+<sp/>alpha,<sp/>alpha<sp/>is<sp/>written<sp/>separately,<sp/>so<sp/>same<sp/>as<sp/>1-channel<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expand_mono)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write3(s,<sp/>d[0],<sp/>d[0],<sp/>d[0]);<sp/></highlight><highlight class="comment">//<sp/>monochrome<sp/>bmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>d,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>monochrome<sp/>TGA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!write_alpha)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>composite<sp/>against<sp/>pink<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>++k)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[k]<sp/>=<sp/>bg[k]<sp/>+<sp/>((d[k]<sp/>-<sp/>bg[k])<sp/>*<sp/>d[3])<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write3(s,<sp/>px[1<sp/>-<sp/>rgb_dir],<sp/>px[1],<sp/>px[1<sp/>+<sp/>rgb_dir]);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write3(s,<sp/>d[1<sp/>-<sp/>rgb_dir],<sp/>d[1],<sp/>d[1<sp/>+<sp/>rgb_dir]);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_alpha<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;d[comp<sp/>-<sp/>1],<sp/>1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__write_pixels(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rgb_dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vdir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scanline_pad,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_mono)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/>stbiw_uint32<sp/>zero<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,<sp/>j_end;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi__flip_vertically_on_write)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vdir<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vdir<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j_end<sp/>=<sp/>-1;<sp/>j<sp/>=<sp/>y-1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j_end<sp/>=<sp/><sp/>y;<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>j<sp/>!=<sp/>j_end;<sp/>j<sp/>+=<sp/>vdir)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data<sp/>+<sp/>(j*x+i)*comp;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_pixel(s,<sp/>rgb_dir,<sp/>comp,<sp/>write_alpha,<sp/>expand_mono,<sp/>d);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;zero,<sp/>scanline_pad);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw__outfile(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rgb_dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vdir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_mono,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>0<sp/>||<sp/>x<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_start(v,<sp/>fmt);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__writefv(s,<sp/>fmt,<sp/>v);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_pixels(s,rgb_dir,vdir,x,y,comp,data,alpha,pad,<sp/>expand_mono);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_bmp_core(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad<sp/>=<sp/>(-x*3)<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbiw__outfile(s,-1,-1,x,y,comp,1,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>data,0,pad,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;11<sp/>4<sp/>22<sp/>4&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;4<sp/>44<sp/>22<sp/>444444&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">,<sp/>14+40+(x*3+pad)*y,<sp/>0,0,<sp/>14+40,<sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>40,<sp/>x,y,<sp/>1,24,<sp/>0,0,0,0,0,0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitmap<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_bmp_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>stbi__start_write_callbacks(&amp;s,<sp/>func,<sp/>context);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_write_bmp_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>data);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_bmp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi__start_write_file(&amp;s,filename))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stbi_write_bmp_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>data);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__end_write_file(&amp;s);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga_core(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_alpha<sp/>=<sp/>(comp<sp/>==<sp/>2<sp/>||<sp/>comp<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorbytes<sp/>=<sp/>has_alpha<sp/>?<sp/>comp-1<sp/>:<sp/>comp;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>colorbytes<sp/>&lt;<sp/>2<sp/>?<sp/>3<sp/>:<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>3<sp/>color<sp/>channels<sp/>(RGB/RGBA)<sp/>=<sp/>2,<sp/>1<sp/>color<sp/>channel<sp/>(Y/YA)<sp/>=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>0<sp/>||<sp/>x<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stbi_write_tga_with_rle)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbiw__outfile(s,<sp/>-1,<sp/>-1,<sp/>x,<sp/>y,<sp/>comp,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>has_alpha,<sp/>0,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;111<sp/>221<sp/>2222<sp/>11&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>format,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>x,<sp/>y,<sp/>(colorbytes<sp/>+<sp/>has_alpha)<sp/>*<sp/>8,<sp/>has_alpha<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jend,<sp/>jdir;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__writef(s,<sp/></highlight><highlight class="stringliteral">&quot;111<sp/>221<sp/>2222<sp/>11&quot;</highlight><highlight class="normal">,<sp/>0,0,format+8,<sp/>0,0,0,<sp/>0,0,x,y,<sp/>(colorbytes<sp/>+<sp/>has_alpha)<sp/>*<sp/>8,<sp/>has_alpha<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi__flip_vertically_on_write)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jend<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jdir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>y-1;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jend<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jdir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>j<sp/>!=<sp/>jend;<sp/>j<sp/>+=<sp/>jdir)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*row<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data<sp/>+<sp/>j<sp/>*<sp/>x<sp/>*<sp/>comp;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x;<sp/>i<sp/>+=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*begin<sp/>=<sp/>row<sp/>+<sp/>i<sp/>*<sp/>comp;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>x<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>memcmp(begin,<sp/>row<sp/>+<sp/>(i<sp/>+<sp/>1)<sp/>*<sp/>comp,<sp/>comp);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prev<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>i<sp/>+<sp/>2;<sp/>k<sp/>&lt;<sp/>x<sp/>&amp;&amp;<sp/>len<sp/>&lt;<sp/>128;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(prev,<sp/>row<sp/>+<sp/>k<sp/>*<sp/>comp,<sp/>comp))<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>+=<sp/>comp;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--len;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>i<sp/>+<sp/>2;<sp/>k<sp/>&lt;<sp/>x<sp/>&amp;&amp;<sp/>len<sp/>&lt;<sp/>128;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(begin,<sp/>row<sp/>+<sp/>k<sp/>*<sp/>comp,<sp/>comp))<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header<sp/>=<sp/>STBIW_UCHAR(len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;header,<sp/>1);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>len;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_pixel(s,<sp/>-1,<sp/>comp,<sp/>has_alpha,<sp/>0,<sp/>begin<sp/>+<sp/>k<sp/>*<sp/>comp);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header<sp/>=<sp/>STBIW_UCHAR(len<sp/>-<sp/>129);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;header,<sp/>1);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_pixel(s,<sp/>-1,<sp/>comp,<sp/>has_alpha,<sp/>0,<sp/>begin);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/>stbi__start_write_callbacks(&amp;s,<sp/>func,<sp/>context);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_write_tga_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>data);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_tga(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi__start_write_file(&amp;s,filename))<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stbi_write_tga_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>data);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__end_write_file(&amp;s);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*************************************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Radiance<sp/>RGBE<sp/>HDR<sp/>writer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>Baldur<sp/>Karlsson</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__max(a,<sp/>b)<sp/><sp/>((a)<sp/>&gt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__linear_to_rgbe(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rgbe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*linear)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxcomp<sp/>=<sp/>stbiw__max(linear[0],<sp/>stbiw__max(linear[1],<sp/>linear[2]));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxcomp<sp/>&lt;<sp/>1e-32f)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[0]<sp/>=<sp/>rgbe[1]<sp/>=<sp/>rgbe[2]<sp/>=<sp/>rgbe[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normalize<sp/>=<sp/>(float)<sp/>frexp(maxcomp,<sp/>&amp;exponent)<sp/>*<sp/>256.0f/maxcomp;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(linear[0]<sp/>*<sp/>normalize);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(linear[1]<sp/>*<sp/>normalize);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(linear[2]<sp/>*<sp/>normalize);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(exponent<sp/>+<sp/>128);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__write_run_data(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>databyte)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lengthbyte<sp/>=<sp/>STBIW_UCHAR(length+128);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/>STBIW_ASSERT(length+128<sp/>&lt;=<sp/>255);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;lengthbyte,<sp/>1);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;databyte,<sp/>1);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__write_dump_data(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lengthbyte<sp/>=<sp/>STBIW_UCHAR(length);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/>STBIW_ASSERT(length<sp/>&lt;=<sp/>128);<sp/></highlight><highlight class="comment">//<sp/>inconsistent<sp/>with<sp/>spec<sp/>but<sp/>consistent<sp/>with<sp/>official<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>&amp;lengthbyte,<sp/>1);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>data,<sp/>length);</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__write_hdr_scanline(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scratch,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*scanline)</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>scanlineheader[4]<sp/>=<sp/>{<sp/>2,<sp/>2,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rgbe[4];</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>linear[3];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/>scanlineheader[2]<sp/>=<sp/>(width&amp;0xff00)&gt;&gt;8;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/>scanlineheader[3]<sp/>=<sp/>(width&amp;0x00ff);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>RLE<sp/>for<sp/>images<sp/>too<sp/>small<sp/>or<sp/>large<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;<sp/>8<sp/>||<sp/>width<sp/>&gt;=<sp/>32768)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ncomp)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="comment">/*<sp/>fallthrough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>linear[2]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear[1]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear[0]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear[0]<sp/>=<sp/>linear[1]<sp/>=<sp/>linear[2]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__linear_to_rgbe(rgbe,<sp/>linear);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>rgbe,<sp/>4);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,r;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encode<sp/>into<sp/>scratch<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ncomp)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="comment">/*<sp/>fallthrough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>linear[2]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear[1]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear[0]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear[0]<sp/>=<sp/>linear[1]<sp/>=<sp/>linear[2]<sp/>=<sp/>scanline[x*ncomp<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__linear_to_rgbe(rgbe,<sp/>linear);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[x<sp/>+<sp/>width*0]<sp/>=<sp/>rgbe[0];</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[x<sp/>+<sp/>width*1]<sp/>=<sp/>rgbe[1];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[x<sp/>+<sp/>width*2]<sp/>=<sp/>rgbe[2];</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[x<sp/>+<sp/>width*3]<sp/>=<sp/>rgbe[3];</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>scanlineheader,<sp/>4);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RLE<sp/>each<sp/>component<sp/>separately<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c=0;<sp/>c<sp/>&lt;<sp/>4;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*comp<sp/>=<sp/>&amp;scratch[width*c];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>first<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r+2<sp/>&lt;<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp[r]<sp/>==<sp/>comp[r+1]<sp/>&amp;&amp;<sp/>comp[r]<sp/>==<sp/>comp[r+2])</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++r;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r+2<sp/>&gt;=<sp/>width)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>up<sp/>to<sp/>first<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>r-x;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>128)<sp/>len<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_dump_data(s,<sp/>len,<sp/>&amp;comp[x]);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there&apos;s<sp/>a<sp/>run,<sp/>output<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r+2<sp/>&lt;<sp/>width)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>same<sp/>test<sp/>as<sp/>what<sp/>we<sp/>break<sp/>out<sp/>of<sp/>in<sp/>search<sp/>loop,<sp/>so<sp/>only<sp/>true<sp/>if<sp/>we<sp/>break&apos;d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>next<sp/>byte<sp/>after<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>width<sp/>&amp;&amp;<sp/>comp[r]<sp/>==<sp/>comp[x])</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++r;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>run<sp/>up<sp/>to<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>r-x;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>127)<sp/>len<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_run_data(s,<sp/>len,<sp/>comp[x]);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_hdr_core(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;=<sp/>0<sp/>||<sp/>x<sp/>&lt;=<sp/>0<sp/>||<sp/>data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>component<sp/>is<sp/>stored<sp/>separately.<sp/>Allocate<sp/>scratch<sp/>space<sp/>for<sp/>full<sp/>output<sp/>scanline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scratch<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>STBIW_MALLOC(x*4);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>len;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[128];</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#?RADIANCE\n#<sp/>Written<sp/>by<sp/>stb_image_write.h\nFORMAT=32-bit_rle_rgbe\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>header,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(header)-1);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__STDC_WANT_SECURE_LIB__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>sprintf_s(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/></highlight><highlight class="stringliteral">&quot;EXPOSURE=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0000000000000\n\n-Y<sp/>%d<sp/>+X<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>y,<sp/>x);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;EXPOSURE=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0000000000000\n\n-Y<sp/>%d<sp/>+X<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>y,<sp/>x);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>buffer,<sp/>len);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i<sp/>&lt;<sp/>y;<sp/>i++)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__write_hdr_scanline(s,<sp/>x,<sp/>comp,<sp/>scratch,<sp/>data<sp/>+<sp/>comp*x*(stbi__flip_vertically_on_write<sp/>?<sp/>y-1-i<sp/>:<sp/>i));</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STBIW_FREE(scratch);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_hdr_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/>stbi__start_write_callbacks(&amp;s,<sp/>func,<sp/>context);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_write_hdr_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>data);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_hdr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi__start_write_file(&amp;s,filename))<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stbi_write_hdr_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>data);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__end_write_file(&amp;s);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PNG<sp/>writer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBIW_ZLIB_COMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stretchy<sp/>buffer;<sp/>stbiw__sbpush()<sp/>==<sp/>vector&lt;&gt;::push_back()<sp/>--<sp/>stbiw__sbcount()<sp/>==<sp/>vector&lt;&gt;::size()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbraw(a)<sp/>((int<sp/>*)<sp/>(a)<sp/>-<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbm(a)<sp/><sp/><sp/>stbiw__sbraw(a)[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbn(a)<sp/><sp/><sp/>stbiw__sbraw(a)[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbneedgrow(a,n)<sp/><sp/>((a)==0<sp/>||<sp/>stbiw__sbn(a)+n<sp/>&gt;=<sp/>stbiw__sbm(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbmaybegrow(a,n)<sp/>(stbiw__sbneedgrow(a,(n))<sp/>?<sp/>stbiw__sbgrow(a,n)<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbgrow(a,n)<sp/><sp/>stbiw__sbgrowf((void<sp/>**)<sp/>&amp;(a),<sp/>(n),<sp/>sizeof(*(a)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbpush(a,<sp/>v)<sp/><sp/><sp/><sp/><sp/><sp/>(stbiw__sbmaybegrow(a,1),<sp/>(a)[stbiw__sbn(a)++]<sp/>=<sp/>(v))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbcount(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((a)<sp/>?<sp/>stbiw__sbn(a)<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__sbfree(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((a)<sp/>?<sp/>STBIW_FREE(stbiw__sbraw(a)),0<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stbiw__sbgrowf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**arr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>increment,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize)</highlight></codeline>
<codeline lineno="792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>*arr<sp/>?<sp/>2*stbiw__sbm(*arr)+increment<sp/>:<sp/>increment+1;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>STBIW_REALLOC_SIZED(*arr<sp/>?<sp/>stbiw__sbraw(*arr)<sp/>:<sp/>0,<sp/>*arr<sp/>?<sp/>(stbiw__sbm(*arr)*itemsize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*2)<sp/>:<sp/>0,<sp/>itemsize<sp/>*<sp/>m<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*2);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/>STBIW_ASSERT(p);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*arr)<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>p)[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*arr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbm(*arr)<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*arr;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbiw__zlib_flushf(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bitbuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bitcount)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*bitcount<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbpush(data,<sp/>STBIW_UCHAR(*bitbuffer));</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bitbuffer<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bitcount<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw__zlib_bitrev(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codebits)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res=0;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codebits--)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(res<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>(code<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw__zlib_countm(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit)</highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>limit<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>258;<sp/>++i)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i]<sp/>!=<sp/>b[i])<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw__zhash(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/>stbiw_uint32<sp/>hash<sp/>=<sp/>data[0]<sp/>+<sp/>(data[1]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(data[2]<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>5;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>17;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>25;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_flush()<sp/>(out<sp/>=<sp/>stbiw__zlib_flushf(out,<sp/>&amp;bitbuf,<sp/>&amp;bitcount))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_add(code,codebits)<sp/>\</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(bitbuf<sp/>|=<sp/>(code)<sp/>&lt;&lt;<sp/>bitcount,<sp/>bitcount<sp/>+=<sp/>(codebits),<sp/>stbiw__zlib_flush())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huffa(b,c)<sp/><sp/>stbiw__zlib_add(stbiw__zlib_bitrev(b,c),c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>huffman<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huff1(n)<sp/><sp/>stbiw__zlib_huffa(0x30<sp/>+<sp/>(n),<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huff2(n)<sp/><sp/>stbiw__zlib_huffa(0x190<sp/>+<sp/>(n)-144,<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huff3(n)<sp/><sp/>stbiw__zlib_huffa(0<sp/>+<sp/>(n)-256,7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huff4(n)<sp/><sp/>stbiw__zlib_huffa(0xc0<sp/>+<sp/>(n)-280,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huff(n)<sp/><sp/>((n)<sp/>&lt;=<sp/>143<sp/>?<sp/>stbiw__zlib_huff1(n)<sp/>:<sp/>(n)<sp/>&lt;=<sp/>255<sp/>?<sp/>stbiw__zlib_huff2(n)<sp/>:<sp/>(n)<sp/>&lt;=<sp/>279<sp/>?<sp/>stbiw__zlib_huff3(n)<sp/>:<sp/>stbiw__zlib_huff4(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__zlib_huffb(n)<sp/>((n)<sp/>&lt;=<sp/>143<sp/>?<sp/>stbiw__zlib_huff1(n)<sp/>:<sp/>stbiw__zlib_huff2(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__ZHASH<sp/><sp/><sp/>16384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBIW_ZLIB_COMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stbi_zlib_compress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBIW_ZLIB_COMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>provided<sp/>a<sp/>zlib<sp/>compress<sp/>implementation,<sp/>use<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STBIW_ZLIB_COMPRESS(data,<sp/>data_len,<sp/>out_len,<sp/>quality);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>use<sp/>builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>lengthc[]<sp/>=<sp/>{<sp/>3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,<sp/>259<sp/>};</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>lengtheb[]=<sp/>{<sp/>0,0,0,0,0,0,0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>4,<sp/>4,<sp/>4,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>5,<sp/><sp/>5,<sp/><sp/>5,<sp/><sp/>0<sp/>};</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>distc[]<sp/><sp/><sp/>=<sp/>{<sp/>1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,<sp/>32768<sp/>};</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>disteb[]<sp/><sp/>=<sp/>{<sp/>0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13<sp/>};</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitbuf=0;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,<sp/>bitcount=0;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***hash_table<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***)<sp/>STBIW_MALLOC(stbiw__ZHASH<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_table<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(quality<sp/>&lt;<sp/>5)<sp/>quality<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/>stbiw__sbpush(out,<sp/>0x78);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEFLATE<sp/>32K<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/>stbiw__sbpush(out,<sp/>0x5e);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FLEVEL<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/>stbiw__zlib_add(1,1);<sp/><sp/></highlight><highlight class="comment">//<sp/>BFINAL<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/>stbiw__zlib_add(1,2);<sp/><sp/></highlight><highlight class="comment">//<sp/>BTYPE<sp/>=<sp/>1<sp/>--<sp/>fixed<sp/>huffman</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stbiw__ZHASH;<sp/>++i)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash_table[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>data_len-3)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hash<sp/>next<sp/>3<sp/>bytes<sp/>of<sp/>data<sp/>to<sp/>be<sp/>compressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>stbiw__zhash(data+i)&amp;(stbiw__ZHASH-1),<sp/>best=3;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bestloc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**hlist<sp/>=<sp/>hash_table[h];</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stbiw__sbcount(hlist);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlist[j]-data<sp/>&gt;<sp/>i-32768)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>entry<sp/>lies<sp/>within<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>stbiw__zlib_countm(hlist[j],<sp/>data+i,<sp/>data_len-i);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>best)<sp/>{<sp/>best=d;<sp/>bestloc=hlist[j];<sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>hash<sp/>table<sp/>entry<sp/>is<sp/>too<sp/>long,<sp/>delete<sp/>half<sp/>the<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_table[h]<sp/>&amp;&amp;<sp/>stbiw__sbn(hash_table[h])<sp/>==<sp/>2*quality)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIW_MEMMOVE(hash_table[h],<sp/>hash_table[h]+quality,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash_table[h][0])*quality);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbn(hash_table[h])<sp/>=<sp/>quality;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbpush(hash_table[h],data+i);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestloc)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;lazy<sp/>matching&quot;<sp/>-<sp/>check<sp/>match<sp/>at<sp/>*next*<sp/>byte,<sp/>and<sp/>if<sp/>it&apos;s<sp/>better,<sp/>do<sp/>cur<sp/>byte<sp/>as<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stbiw__zhash(data+i+1)&amp;(stbiw__ZHASH-1);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlist<sp/>=<sp/>hash_table[h];</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stbiw__sbcount(hlist);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlist[j]-data<sp/>&gt;<sp/>i-32767)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>stbiw__zlib_countm(hlist[j],<sp/>data+i+1,<sp/>data_len-i-1);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&gt;<sp/>best)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>next<sp/>match<sp/>is<sp/>better,<sp/>bail<sp/>on<sp/>current<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestloc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestloc)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>(int)<sp/>(data+i<sp/>-<sp/>bestloc);<sp/></highlight><highlight class="comment">//<sp/>distance<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIW_ASSERT(d<sp/>&lt;=<sp/>32767<sp/>&amp;&amp;<sp/>best<sp/>&lt;=<sp/>258);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>best<sp/>&gt;<sp/>lengthc[j+1]-1;<sp/>++j);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__zlib_huff(j+257);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lengtheb[j])<sp/>stbiw__zlib_add(best<sp/>-<sp/>lengthc[j],<sp/>lengtheb[j]);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>d<sp/>&gt;<sp/>distc[j+1]-1;<sp/>++j);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__zlib_add(stbiw__zlib_bitrev(j,5),5);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disteb[j])<sp/>stbiw__zlib_add(d<sp/>-<sp/>distc[j],<sp/>disteb[j]);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>best;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__zlib_huffb(data[i]);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>final<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;i<sp/>&lt;<sp/>data_len;<sp/>++i)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__zlib_huffb(data[i]);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/>stbiw__zlib_huff(256);<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>with<sp/>0<sp/>bits<sp/>to<sp/>byte<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bitcount)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__zlib_add(0,1);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stbiw__ZHASH;<sp/>++i)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>stbiw__sbfree(hash_table[i]);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/>STBIW_FREE(hash_table);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>adler32<sp/>on<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s1=1,<sp/>s2=0;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklen<sp/>=<sp/>(int)<sp/>(data_len<sp/>%<sp/>5552);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>data_len)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>blocklen;<sp/>++i)<sp/>{<sp/>s1<sp/>+=<sp/>data[j+i];<sp/>s2<sp/>+=<sp/>s1;<sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>%=<sp/>65521;<sp/>s2<sp/>%=<sp/>65521;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>blocklen;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocklen<sp/>=<sp/>5552;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbpush(out,<sp/>STBIW_UCHAR(s2<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbpush(out,<sp/>STBIW_UCHAR(s2));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbpush(out,<sp/>STBIW_UCHAR(s1<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__sbpush(out,<sp/>STBIW_UCHAR(s1));</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/>*out_len<sp/>=<sp/>stbiw__sbn(out);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>returned<sp/>pointer<sp/>freeable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/>STBIW_MEMMOVE(stbiw__sbraw(out),<sp/>out,<sp/>*out_len);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>stbiw__sbraw(out);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBIW_ZLIB_COMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw__crc32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBIW_CRC32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STBIW_CRC32(buffer,<sp/>len);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crc_table[256]<sp/>=</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x00000000,<sp/>0x77073096,<sp/>0xEE0E612C,<sp/>0x990951BA,<sp/>0x076DC419,<sp/>0x706AF48F,<sp/>0xE963A535,<sp/>0x9E6495A3,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0eDB8832,<sp/>0x79DCB8A4,<sp/>0xE0D5E91E,<sp/>0x97D2D988,<sp/>0x09B64C2B,<sp/>0x7EB17CBD,<sp/>0xE7B82D07,<sp/>0x90BF1D91,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1DB71064,<sp/>0x6AB020F2,<sp/>0xF3B97148,<sp/>0x84BE41DE,<sp/>0x1ADAD47D,<sp/>0x6DDDE4EB,<sp/>0xF4D4B551,<sp/>0x83D385C7,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x136C9856,<sp/>0x646BA8C0,<sp/>0xFD62F97A,<sp/>0x8A65C9EC,<sp/>0x14015C4F,<sp/>0x63066CD9,<sp/>0xFA0F3D63,<sp/>0x8D080DF5,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x3B6E20C8,<sp/>0x4C69105E,<sp/>0xD56041E4,<sp/>0xA2677172,<sp/>0x3C03E4D1,<sp/>0x4B04D447,<sp/>0xD20D85FD,<sp/>0xA50AB56B,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x35B5A8FA,<sp/>0x42B2986C,<sp/>0xDBBBC9D6,<sp/>0xACBCF940,<sp/>0x32D86CE3,<sp/>0x45DF5C75,<sp/>0xDCD60DCF,<sp/>0xABD13D59,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x26D930AC,<sp/>0x51DE003A,<sp/>0xC8D75180,<sp/>0xBFD06116,<sp/>0x21B4F4B5,<sp/>0x56B3C423,<sp/>0xCFBA9599,<sp/>0xB8BDA50F,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x2802B89E,<sp/>0x5F058808,<sp/>0xC60CD9B2,<sp/>0xB10BE924,<sp/>0x2F6F7C87,<sp/>0x58684C11,<sp/>0xC1611DAB,<sp/>0xB6662D3D,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x76DC4190,<sp/>0x01DB7106,<sp/>0x98D220BC,<sp/>0xEFD5102A,<sp/>0x71B18589,<sp/>0x06B6B51F,<sp/>0x9FBFE4A5,<sp/>0xE8B8D433,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x7807C9A2,<sp/>0x0F00F934,<sp/>0x9609A88E,<sp/>0xE10E9818,<sp/>0x7F6A0DBB,<sp/>0x086D3D2D,<sp/>0x91646C97,<sp/>0xE6635C01,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x6B6B51F4,<sp/>0x1C6C6162,<sp/>0x856530D8,<sp/>0xF262004E,<sp/>0x6C0695ED,<sp/>0x1B01A57B,<sp/>0x8208F4C1,<sp/>0xF50FC457,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x65B0D9C6,<sp/>0x12B7E950,<sp/>0x8BBEB8EA,<sp/>0xFCB9887C,<sp/>0x62DD1DDF,<sp/>0x15DA2D49,<sp/>0x8CD37CF3,<sp/>0xFBD44C65,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x4DB26158,<sp/>0x3AB551CE,<sp/>0xA3BC0074,<sp/>0xD4BB30E2,<sp/>0x4ADFA541,<sp/>0x3DD895D7,<sp/>0xA4D1C46D,<sp/>0xD3D6F4FB,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x4369E96A,<sp/>0x346ED9FC,<sp/>0xAD678846,<sp/>0xDA60B8D0,<sp/>0x44042D73,<sp/>0x33031DE5,<sp/>0xAA0A4C5F,<sp/>0xDD0D7CC9,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x5005713C,<sp/>0x270241AA,<sp/>0xBE0B1010,<sp/>0xC90C2086,<sp/>0x5768B525,<sp/>0x206F85B3,<sp/>0xB966D409,<sp/>0xCE61E49F,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x5EDEF90E,<sp/>0x29D9C998,<sp/>0xB0D09822,<sp/>0xC7D7A8B4,<sp/>0x59B33D17,<sp/>0x2EB40D81,<sp/>0xB7BD5C3B,<sp/>0xC0BA6CAD,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xEDB88320,<sp/>0x9ABFB3B6,<sp/>0x03B6E20C,<sp/>0x74B1D29A,<sp/>0xEAD54739,<sp/>0x9DD277AF,<sp/>0x04DB2615,<sp/>0x73DC1683,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xE3630B12,<sp/>0x94643B84,<sp/>0x0D6D6A3E,<sp/>0x7A6A5AA8,<sp/>0xE40ECF0B,<sp/>0x9309FF9D,<sp/>0x0A00AE27,<sp/>0x7D079EB1,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xF00F9344,<sp/>0x8708A3D2,<sp/>0x1E01F268,<sp/>0x6906C2FE,<sp/>0xF762575D,<sp/>0x806567CB,<sp/>0x196C3671,<sp/>0x6E6B06E7,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xFED41B76,<sp/>0x89D32BE0,<sp/>0x10DA7A5A,<sp/>0x67DD4ACC,<sp/>0xF9B9DF6F,<sp/>0x8EBEEFF9,<sp/>0x17B7BE43,<sp/>0x60B08ED5,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xD6D6A3E8,<sp/>0xA1D1937E,<sp/>0x38D8C2C4,<sp/>0x4FDFF252,<sp/>0xD1BB67F1,<sp/>0xA6BC5767,<sp/>0x3FB506DD,<sp/>0x48B2364B,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xD80D2BDA,<sp/>0xAF0A1B4C,<sp/>0x36034AF6,<sp/>0x41047A60,<sp/>0xDF60EFC3,<sp/>0xA867DF55,<sp/>0x316E8EEF,<sp/>0x4669BE79,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xCB61B38C,<sp/>0xBC66831A,<sp/>0x256FD2A0,<sp/>0x5268E236,<sp/>0xCC0C7795,<sp/>0xBB0B4703,<sp/>0x220216B9,<sp/>0x5505262F,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xC5BA3BBE,<sp/>0xB2BD0B28,<sp/>0x2BB45A92,<sp/>0x5CB36A04,<sp/>0xC2D7FFA7,<sp/>0xB5D0CF31,<sp/>0x2CD99E8B,<sp/>0x5BDEAE1D,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x9B64C2B0,<sp/>0xEC63F226,<sp/>0x756AA39C,<sp/>0x026D930A,<sp/>0x9C0906A9,<sp/>0xEB0E363F,<sp/>0x72076785,<sp/>0x05005713,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x95BF4A82,<sp/>0xE2B87A14,<sp/>0x7BB12BAE,<sp/>0x0CB61B38,<sp/>0x92D28E9B,<sp/>0xE5D5BE0D,<sp/>0x7CDCEFB7,<sp/>0x0BDBDF21,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x86D3D2D4,<sp/>0xF1D4E242,<sp/>0x68DDB3F8,<sp/>0x1FDA836E,<sp/>0x81BE16CD,<sp/>0xF6B9265B,<sp/>0x6FB077E1,<sp/>0x18B74777,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x88085AE6,<sp/>0xFF0F6A70,<sp/>0x66063BCA,<sp/>0x11010B5C,<sp/>0x8F659EFF,<sp/>0xF862AE69,<sp/>0x616BFFD3,<sp/>0x166CCF45,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xA00AE278,<sp/>0xD70DD2EE,<sp/>0x4E048354,<sp/>0x3903B3C2,<sp/>0xA7672661,<sp/>0xD06016F7,<sp/>0x4969474D,<sp/>0x3E6E77DB,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xAED16A4A,<sp/>0xD9D65ADC,<sp/>0x40DF0B66,<sp/>0x37D83BF0,<sp/>0xA9BCAE53,<sp/>0xDEBB9EC5,<sp/>0x47B2CF7F,<sp/>0x30B5FFE9,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xBDBDF21C,<sp/>0xCABAC28A,<sp/>0x53B39330,<sp/>0x24B4A3A6,<sp/>0xBAD03605,<sp/>0xCDD70693,<sp/>0x54DE5729,<sp/>0x23D967BF,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xB3667A2E,<sp/>0xC4614AB8,<sp/>0x5D681B02,<sp/>0x2A6F2B94,<sp/>0xB40BBE37,<sp/>0xC30C8EA1,<sp/>0x5A05DF1B,<sp/>0x2D02EF8D</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crc<sp/>=<sp/>~0u;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>(crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/>crc_table[buffer[i]<sp/>^<sp/>(crc<sp/>&amp;<sp/>0xff)];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~crc;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__wpng4(o,a,b,c,d)<sp/>((o)[0]=STBIW_UCHAR(a),(o)[1]=STBIW_UCHAR(b),(o)[2]=STBIW_UCHAR(c),(o)[3]=STBIW_UCHAR(d),(o)+=4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__wp32(data,v)<sp/>stbiw__wpng4(data,<sp/>(v)&gt;&gt;24,(v)&gt;&gt;16,(v)&gt;&gt;8,(v));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbiw__wptag(data,s)<sp/>stbiw__wpng4(data,<sp/>s[0],s[1],s[2],s[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__wpcrc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crc<sp/>=<sp/>stbiw__crc32(*data<sp/>-<sp/>len<sp/>-<sp/>4,<sp/>len+4);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/>stbiw__wp32(*data,<sp/>crc);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stbiw__paeth(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>a<sp/>+<sp/>b<sp/>-<sp/>c,<sp/>pa<sp/>=<sp/>abs(p-a),<sp/>pb<sp/>=<sp/>abs(p-b),<sp/>pc<sp/>=<sp/>abs(p-c);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa<sp/>&lt;=<sp/>pb<sp/>&amp;&amp;<sp/>pa<sp/>&lt;=<sp/>pc)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STBIW_UCHAR(a);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb<sp/>&lt;=<sp/>pc)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STBIW_UCHAR(b);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STBIW_UCHAR(c);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>provide<sp/>an<sp/>option<sp/>that<sp/>always<sp/>forces<sp/>left-predict<sp/>or<sp/>paeth<sp/>predict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__encode_png_line(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pixels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_type,<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line_buffer)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapping[]<sp/>=<sp/>{<sp/>0,1,2,3,4<sp/>};</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstmap[]<sp/>=<sp/>{<sp/>0,1,0,5,6<sp/>};</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mymap<sp/>=<sp/>(y<sp/>!=<sp/>0)<sp/>?<sp/>mapping<sp/>:<sp/>firstmap;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>mymap[filter_type];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>pixels<sp/>+<sp/>stride_bytes<sp/>*<sp/>(stbi__flip_vertically_on_write<sp/>?<sp/>height-1-y<sp/>:<sp/>y);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signed_stride<sp/>=<sp/>stbi__flip_vertically_on_write<sp/>?<sp/>-stride_bytes<sp/>:<sp/>stride_bytes;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type==0)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(line_buffer,<sp/>z,<sp/>width*n);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>loop<sp/>isn&apos;t<sp/>optimized<sp/>since<sp/>it&apos;s<sp/>just<sp/>one<sp/>pixel<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>line_buffer[i]<sp/>=<sp/>z[i];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>z[i-signed_stride];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>(z[i-signed_stride]&gt;&gt;1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>line_buffer[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>char)<sp/>(z[i]<sp/>-<sp/>stbiw__paeth(0,z[i-signed_stride],0));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/>line_buffer[i]<sp/>=<sp/>z[i];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/>line_buffer[i]<sp/>=<sp/>z[i];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&lt;<sp/>width*n;<sp/>++i)<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>z[i-n];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&lt;<sp/>width*n;<sp/>++i)<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>z[i-signed_stride];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&lt;<sp/>width*n;<sp/>++i)<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>((z[i-n]<sp/>+<sp/>z[i-signed_stride])&gt;&gt;1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&lt;<sp/>width*n;<sp/>++i)<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>stbiw__paeth(z[i-n],<sp/>z[i-signed_stride],<sp/>z[i-signed_stride-n]);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&lt;<sp/>width*n;<sp/>++i)<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>(z[i-n]&gt;&gt;1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n;<sp/>i<sp/>&lt;<sp/>width*n;<sp/>++i)<sp/>line_buffer[i]<sp/>=<sp/>z[i]<sp/>-<sp/>stbiw__paeth(z[i-n],<sp/>0,0);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_write_png_to_mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pixels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_len)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force_filter<sp/>=<sp/>stbi_write_force_png_filter;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctype[5]<sp/>=<sp/>{<sp/>-1,<sp/>0,<sp/>4,<sp/>2,<sp/>6<sp/>};</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sig[8]<sp/>=<sp/>{<sp/>137,80,78,71,13,10,26,10<sp/>};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,*o,<sp/>*filt,<sp/>*zlib;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line_buffer;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,zlen;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stride_bytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stride_bytes<sp/>=<sp/>x<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force_filter<sp/>&gt;=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>force_filter<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/>filt<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>STBIW_MALLOC((x*n+1)<sp/>*<sp/>y);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/>line_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>STBIW_MALLOC(x<sp/>*<sp/>n);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!line_buffer)<sp/>{<sp/>STBIW_FREE(filt);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_type;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force_filter<sp/>&gt;<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter_type<sp/>=<sp/>force_filter;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__encode_png_line((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(pixels),<sp/>stride_bytes,<sp/>x,<sp/>y,<sp/>j,<sp/>n,<sp/>force_filter,<sp/>line_buffer);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>the<sp/>best<sp/>filter<sp/>by<sp/>running<sp/>through<sp/>all<sp/>of<sp/>them:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_filter<sp/>=<sp/>0,<sp/>best_filter_val<sp/>=<sp/>0x7fffffff,<sp/>est,<sp/>i;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(filter_type<sp/>=<sp/>0;<sp/>filter_type<sp/>&lt;<sp/>5;<sp/>filter_type++)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__encode_png_line((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(pixels),<sp/>stride_bytes,<sp/>x,<sp/>y,<sp/>j,<sp/>n,<sp/>filter_type,<sp/>line_buffer);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>the<sp/>entropy<sp/>of<sp/>the<sp/>line<sp/>using<sp/>this<sp/>filter;<sp/>the<sp/>less,<sp/>the<sp/>better.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>est<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x*n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>est<sp/>+=<sp/>abs((</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>line_buffer[i]);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(est<sp/>&lt;<sp/>best_filter_val)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_filter_val<sp/>=<sp/>est;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_filter<sp/>=<sp/>filter_type;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_type<sp/>!=<sp/>best_filter)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>last<sp/>iteration<sp/>already<sp/>got<sp/>us<sp/>the<sp/>best<sp/>filter,<sp/>don&apos;t<sp/>redo<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__encode_png_line((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(pixels),<sp/>stride_bytes,<sp/>x,<sp/>y,<sp/>j,<sp/>n,<sp/>best_filter,<sp/>line_buffer);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter_type<sp/>=<sp/>best_filter;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>get<sp/>here,<sp/>filter_type<sp/>contains<sp/>the<sp/>filter<sp/>type,<sp/>and<sp/>line_buffer<sp/>contains<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filt[j*(x*n+1)]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>filter_type;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STBIW_MEMMOVE(filt+j*(x*n+1)+1,<sp/>line_buffer,<sp/>x*n);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/>STBIW_FREE(line_buffer);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/>zlib<sp/>=<sp/>stbi_zlib_compress(filt,<sp/>y*(<sp/>x*n+1),<sp/>&amp;zlen,<sp/>stbi_write_png_compression_level);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/>STBIW_FREE(filt);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zlib)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>tag<sp/>requires<sp/>12<sp/>bytes<sp/>of<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/>out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>STBIW_MALLOC(8<sp/>+<sp/>12+13<sp/>+<sp/>12+zlen<sp/>+<sp/>12);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/>*out_len<sp/>=<sp/>8<sp/>+<sp/>12+13<sp/>+<sp/>12+zlen<sp/>+<sp/>12;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/>o=out;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/>STBIW_MEMMOVE(o,sig,8);<sp/>o+=<sp/>8;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/>stbiw__wp32(o,<sp/>13);<sp/></highlight><highlight class="comment">//<sp/>header<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/>stbiw__wptag(o,<sp/></highlight><highlight class="stringliteral">&quot;IHDR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/>stbiw__wp32(o,<sp/>x);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/>stbiw__wp32(o,<sp/>y);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/>*o++<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/>*o++<sp/>=<sp/>STBIW_UCHAR(ctype[n]);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/>*o++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/>*o++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/>*o++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/>stbiw__wpcrc(&amp;o,13);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/>stbiw__wp32(o,<sp/>zlen);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/>stbiw__wptag(o,<sp/></highlight><highlight class="stringliteral">&quot;IDAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/>STBIW_MEMMOVE(o,<sp/>zlib,<sp/>zlen);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/>o<sp/>+=<sp/>zlen;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/>STBIW_FREE(zlib);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/>stbiw__wpcrc(&amp;o,<sp/>zlen);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/>stbiw__wp32(o,0);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/>stbiw__wptag(o,<sp/></highlight><highlight class="stringliteral">&quot;IEND&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>stbiw__wpcrc(&amp;o,0);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/>STBIW_ASSERT(o<sp/>==<sp/>out<sp/>+<sp/>*out_len);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*png<sp/>=<sp/>stbi_write_png_to_mem((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>stride_bytes,<sp/>x,<sp/>y,<sp/>comp,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(png<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>stbiw__fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/>{<sp/>STBIW_FREE(png);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/>fwrite(png,<sp/>1,<sp/>len,<sp/>f);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/>STBIW_FREE(png);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_png_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*png<sp/>=<sp/>stbi_write_png_to_mem((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>stride_bytes,<sp/>x,<sp/>y,<sp/>comp,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(png<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/>func(context,<sp/>png,<sp/>len);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/>STBIW_FREE(png);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/>*<sp/>JPEG<sp/>writer</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>based<sp/>on<sp/>Jon<sp/>Olick&apos;s<sp/>jo_jpeg.cpp:</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/>*<sp/>public<sp/>domain<sp/>Simple,<sp/>Minimalistic<sp/>JPEG<sp/>writer<sp/>-<sp/>http://www.jonolick.com/code.html</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stbiw__jpg_ZigZag[]<sp/>=<sp/>{<sp/>0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63<sp/>};</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__jpg_writeBits(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bitBufP,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bitCntP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*bs)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitBuf<sp/>=<sp/>*bitBufP,<sp/>bitCnt<sp/>=<sp/>*bitCntP;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/>bitCnt<sp/>+=<sp/>bs[1];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/>bitBuf<sp/>|=<sp/>bs[0]<sp/>&lt;&lt;<sp/>(24<sp/>-<sp/>bitCnt);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bitCnt<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>(bitBuf<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__putc(s,<sp/>c);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__putc(s,<sp/>0);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitBuf<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitCnt<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/>*bitBufP<sp/>=<sp/>bitBuf;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/>*bitCntP<sp/>=<sp/>bitCnt;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__jpg_DCT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d1p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d2p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d3p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d4p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d5p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d6p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d7p)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d0<sp/>=<sp/>*d0p,<sp/>d1<sp/>=<sp/>*d1p,<sp/>d2<sp/>=<sp/>*d2p,<sp/>d3<sp/>=<sp/>*d3p,<sp/>d4<sp/>=<sp/>*d4p,<sp/>d5<sp/>=<sp/>*d5p,<sp/>d6<sp/>=<sp/>*d6p,<sp/>d7<sp/>=<sp/>*d7p;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z11,<sp/>z13;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp0<sp/>=<sp/>d0<sp/>+<sp/>d7;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp7<sp/>=<sp/>d0<sp/>-<sp/>d7;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp1<sp/>=<sp/>d1<sp/>+<sp/>d6;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp6<sp/>=<sp/>d1<sp/>-<sp/>d6;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp2<sp/>=<sp/>d2<sp/>+<sp/>d5;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp5<sp/>=<sp/>d2<sp/>-<sp/>d5;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp3<sp/>=<sp/>d3<sp/>+<sp/>d4;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp4<sp/>=<sp/>d3<sp/>-<sp/>d4;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp10<sp/>=<sp/>tmp0<sp/>+<sp/>tmp3;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp13<sp/>=<sp/>tmp0<sp/>-<sp/>tmp3;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp11<sp/>=<sp/>tmp1<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp12<sp/>=<sp/>tmp1<sp/>-<sp/>tmp2;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/>d0<sp/>=<sp/>tmp10<sp/>+<sp/>tmp11;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/>d4<sp/>=<sp/>tmp10<sp/>-<sp/>tmp11;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/>z1<sp/>=<sp/>(tmp12<sp/>+<sp/>tmp13)<sp/>*<sp/>0.707106781f;<sp/></highlight><highlight class="comment">//<sp/>c4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/>d2<sp/>=<sp/>tmp13<sp/>+<sp/>z1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/>d6<sp/>=<sp/>tmp13<sp/>-<sp/>z1;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Odd<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/>tmp10<sp/>=<sp/>tmp4<sp/>+<sp/>tmp5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/>tmp11<sp/>=<sp/>tmp5<sp/>+<sp/>tmp6;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/>tmp12<sp/>=<sp/>tmp6<sp/>+<sp/>tmp7;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>rotator<sp/>is<sp/>modified<sp/>from<sp/>fig<sp/>4-8<sp/>to<sp/>avoid<sp/>extra<sp/>negations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/>z5<sp/>=<sp/>(tmp10<sp/>-<sp/>tmp12)<sp/>*<sp/>0.382683433f;<sp/></highlight><highlight class="comment">//<sp/>c6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/>z2<sp/>=<sp/>tmp10<sp/>*<sp/>0.541196100f<sp/>+<sp/>z5;<sp/></highlight><highlight class="comment">//<sp/>c2-c6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/>z4<sp/>=<sp/>tmp12<sp/>*<sp/>1.306562965f<sp/>+<sp/>z5;<sp/></highlight><highlight class="comment">//<sp/>c2+c6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/>z3<sp/>=<sp/>tmp11<sp/>*<sp/>0.707106781f;<sp/></highlight><highlight class="comment">//<sp/>c4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/>z11<sp/>=<sp/>tmp7<sp/>+<sp/>z3;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/>z13<sp/>=<sp/>tmp7<sp/>-<sp/>z3;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/>*d5p<sp/>=<sp/>z13<sp/>+<sp/>z2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/>*d3p<sp/>=<sp/>z13<sp/>-<sp/>z2;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/>*d1p<sp/>=<sp/>z11<sp/>+<sp/>z4;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/>*d7p<sp/>=<sp/>z11<sp/>-<sp/>z4;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/>*d0p<sp/>=<sp/>d0;<sp/><sp/>*d2p<sp/>=<sp/>d2;<sp/><sp/>*d4p<sp/>=<sp/>d4;<sp/><sp/>*d6p<sp/>=<sp/>d6;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbiw__jpg_calcBits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>bits[2])<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp1<sp/>=<sp/>val<sp/>&lt;<sp/>0<sp/>?<sp/>-val<sp/>:<sp/>val;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/>val<sp/>=<sp/>val<sp/>&lt;<sp/>0<sp/>?<sp/>val-1<sp/>:<sp/>val;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/>bits[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(tmp1<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bits[1];</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/>bits[0]<sp/>=<sp/>val<sp/>&amp;<sp/>((1&lt;&lt;bits[1])-1);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbiw__jpg_processDU(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bitBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bitCnt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*CDU,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*fdtbl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DC,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HTDC[256][2],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HTAC[256][2])<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>EOB[2]<sp/>=<sp/>{<sp/>HTAC[0x00][0],<sp/>HTAC[0x00][1]<sp/>};</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>M16zeroes[2]<sp/>=<sp/>{<sp/>HTAC[0xF0][0],<sp/>HTAC[0xF0][1]<sp/>};</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataOff,<sp/>i,<sp/>diff,<sp/>end0pos;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DU[64];</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DCT<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataOff=0;<sp/>dataOff&lt;64;<sp/>dataOff+=8)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_DCT(&amp;CDU[dataOff],<sp/>&amp;CDU[dataOff+1],<sp/>&amp;CDU[dataOff+2],<sp/>&amp;CDU[dataOff+3],<sp/>&amp;CDU[dataOff+4],<sp/>&amp;CDU[dataOff+5],<sp/>&amp;CDU[dataOff+6],<sp/>&amp;CDU[dataOff+7]);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DCT<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dataOff=0;<sp/>dataOff&lt;8;<sp/>++dataOff)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_DCT(&amp;CDU[dataOff],<sp/>&amp;CDU[dataOff+8],<sp/>&amp;CDU[dataOff+16],<sp/>&amp;CDU[dataOff+24],<sp/>&amp;CDU[dataOff+32],<sp/>&amp;CDU[dataOff+40],<sp/>&amp;CDU[dataOff+48],<sp/>&amp;CDU[dataOff+56]);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quantize/descale/zigzag<sp/>the<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>CDU[i]*fdtbl[i];</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DU[stbiw__jpg_ZigZag[i]]<sp/>=<sp/>(int)(v<sp/>&lt;<sp/>0<sp/>?<sp/>ceilf(v<sp/>-<sp/>0.5f)<sp/>:<sp/>floorf(v<sp/>+<sp/>0.5f));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ceilf()<sp/>and<sp/>floorf()<sp/>are<sp/>C99,<sp/>not<sp/>C89,<sp/>but<sp/>I<sp/>/think/<sp/>they&apos;re<sp/>not<sp/>needed<sp/>here<sp/>anyway?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DU[stbiw__jpg_ZigZag[i]]<sp/>=<sp/>(int)(v<sp/>&lt;<sp/>0<sp/>?<sp/>v<sp/>-<sp/>0.5f<sp/>:<sp/>v<sp/>+<sp/>0.5f);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encode<sp/>DC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/>diff<sp/>=<sp/>DU[0]<sp/>-<sp/>DC;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>HTDC[0]);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>bits[2];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_calcBits(diff,<sp/>bits);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>HTDC[bits[1]]);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>bits);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encode<sp/>ACs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/>end0pos<sp/>=<sp/>63;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>(end0pos&gt;0)&amp;&amp;(DU[end0pos]==0);<sp/>--end0pos)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end0pos<sp/>=<sp/>first<sp/>element<sp/>in<sp/>reverse<sp/>order<sp/>!=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end0pos<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>EOB);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DU[0];</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>end0pos;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startpos<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrzeroes;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>bits[2];</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>DU[i]==0<sp/>&amp;&amp;<sp/>i&lt;=end0pos;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nrzeroes<sp/>=<sp/>i-startpos;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nrzeroes<sp/>&gt;=<sp/>16<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lng<sp/>=<sp/>nrzeroes&gt;&gt;4;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrmarker;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nrmarker=1;<sp/>nrmarker<sp/>&lt;=<sp/>lng;<sp/>++nrmarker)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>M16zeroes);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrzeroes<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_calcBits(DU[i],<sp/>bits);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>HTAC[(nrzeroes&lt;&lt;4)+bits[1]]);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>bits);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end0pos<sp/>!=<sp/>63)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>bitBuf,<sp/>bitCnt,<sp/>EOB);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DU[0];</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_jpg_core(stbi__write_context<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constants<sp/>that<sp/>don&apos;t<sp/>pollute<sp/>global<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_dc_luminance_nrcodes[]<sp/>=<sp/>{0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0};</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_dc_luminance_values[]<sp/>=<sp/>{0,1,2,3,4,5,6,7,8,9,10,11};</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_ac_luminance_nrcodes[]<sp/>=<sp/>{0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d};</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_ac_luminance_values[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_dc_chrominance_nrcodes[]<sp/>=<sp/>{0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0};</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_dc_chrominance_values[]<sp/>=<sp/>{0,1,2,3,4,5,6,7,8,9,10,11};</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_ac_chrominance_nrcodes[]<sp/>=<sp/>{0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77};</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>std_ac_chrominance_values[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Huffman<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>YDC_HT[256][2]<sp/>=<sp/>{<sp/>{0,2},{2,3},{3,3},{4,3},{5,3},{6,3},{14,4},{30,5},{62,6},{126,7},{254,8},{510,9}};</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>UVDC_HT[256][2]<sp/>=<sp/>{<sp/>{0,2},{1,2},{2,2},{6,3},{14,4},{30,5},{62,6},{126,7},{254,8},{510,9},{1022,10},{2046,11}};</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>YAC_HT[256][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10,4},{0,2},{1,2},{4,3},{11,4},{26,5},{120,7},{248,8},{1014,10},{65410,16},{65411,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{12,4},{27,5},{121,7},{502,9},{2038,11},{65412,16},{65413,16},{65414,16},{65415,16},{65416,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{28,5},{249,8},{1015,10},{4084,12},{65417,16},{65418,16},{65419,16},{65420,16},{65421,16},{65422,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{58,6},{503,9},{4085,12},{65423,16},{65424,16},{65425,16},{65426,16},{65427,16},{65428,16},{65429,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{59,6},{1016,10},{65430,16},{65431,16},{65432,16},{65433,16},{65434,16},{65435,16},{65436,16},{65437,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{122,7},{2039,11},{65438,16},{65439,16},{65440,16},{65441,16},{65442,16},{65443,16},{65444,16},{65445,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{123,7},{4086,12},{65446,16},{65447,16},{65448,16},{65449,16},{65450,16},{65451,16},{65452,16},{65453,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{250,8},{4087,12},{65454,16},{65455,16},{65456,16},{65457,16},{65458,16},{65459,16},{65460,16},{65461,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{504,9},{32704,15},{65462,16},{65463,16},{65464,16},{65465,16},{65466,16},{65467,16},{65468,16},{65469,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{505,9},{65470,16},{65471,16},{65472,16},{65473,16},{65474,16},{65475,16},{65476,16},{65477,16},{65478,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{506,9},{65479,16},{65480,16},{65481,16},{65482,16},{65483,16},{65484,16},{65485,16},{65486,16},{65487,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1017,10},{65488,16},{65489,16},{65490,16},{65491,16},{65492,16},{65493,16},{65494,16},{65495,16},{65496,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1018,10},{65497,16},{65498,16},{65499,16},{65500,16},{65501,16},{65502,16},{65503,16},{65504,16},{65505,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2040,11},{65506,16},{65507,16},{65508,16},{65509,16},{65510,16},{65511,16},{65512,16},{65513,16},{65514,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{65515,16},{65516,16},{65517,16},{65518,16},{65519,16},{65520,16},{65521,16},{65522,16},{65523,16},{65524,16},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2041,11},{65525,16},{65526,16},{65527,16},{65528,16},{65529,16},{65530,16},{65531,16},{65532,16},{65533,16},{65534,16},{0,0},{0,0},{0,0},{0,0},{0,0}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>UVAC_HT[256][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0,2},{1,2},{4,3},{10,4},{24,5},{25,5},{56,6},{120,7},{500,9},{1014,10},{4084,12},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{11,4},{57,6},{246,8},{501,9},{2038,11},{4085,12},{65416,16},{65417,16},{65418,16},{65419,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{26,5},{247,8},{1015,10},{4086,12},{32706,15},{65420,16},{65421,16},{65422,16},{65423,16},{65424,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{27,5},{248,8},{1016,10},{4087,12},{65425,16},{65426,16},{65427,16},{65428,16},{65429,16},{65430,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{58,6},{502,9},{65431,16},{65432,16},{65433,16},{65434,16},{65435,16},{65436,16},{65437,16},{65438,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{59,6},{1017,10},{65439,16},{65440,16},{65441,16},{65442,16},{65443,16},{65444,16},{65445,16},{65446,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{121,7},{2039,11},{65447,16},{65448,16},{65449,16},{65450,16},{65451,16},{65452,16},{65453,16},{65454,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{122,7},{2040,11},{65455,16},{65456,16},{65457,16},{65458,16},{65459,16},{65460,16},{65461,16},{65462,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{249,8},{65463,16},{65464,16},{65465,16},{65466,16},{65467,16},{65468,16},{65469,16},{65470,16},{65471,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{503,9},{65472,16},{65473,16},{65474,16},{65475,16},{65476,16},{65477,16},{65478,16},{65479,16},{65480,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{504,9},{65481,16},{65482,16},{65483,16},{65484,16},{65485,16},{65486,16},{65487,16},{65488,16},{65489,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{505,9},{65490,16},{65491,16},{65492,16},{65493,16},{65494,16},{65495,16},{65496,16},{65497,16},{65498,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{506,9},{65499,16},{65500,16},{65501,16},{65502,16},{65503,16},{65504,16},{65505,16},{65506,16},{65507,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2041,11},{65508,16},{65509,16},{65510,16},{65511,16},{65512,16},{65513,16},{65514,16},{65515,16},{65516,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{16352,14},{65517,16},{65518,16},{65519,16},{65520,16},{65521,16},{65522,16},{65523,16},{65524,16},{65525,16},{0,0},{0,0},{0,0},{0,0},{0,0},</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1018,10},{32707,15},{65526,16},{65527,16},{65528,16},{65529,16},{65530,16},{65531,16},{65532,16},{65533,16},{65534,16},{0,0},{0,0},{0,0},{0,0},{0,0}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>YQT[]<sp/>=<sp/>{16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99};</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UVQT[]<sp/>=<sp/>{17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99};</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aasf[]<sp/>=<sp/>{<sp/>1.0f<sp/>*<sp/>2.828427125f,<sp/>1.387039845f<sp/>*<sp/>2.828427125f,<sp/>1.306562965f<sp/>*<sp/>2.828427125f,<sp/>1.175875602f<sp/>*<sp/>2.828427125f,<sp/></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0f<sp/>*<sp/>2.828427125f,<sp/>0.785694958f<sp/>*<sp/>2.828427125f,<sp/>0.541196100f<sp/>*<sp/>2.828427125f,<sp/>0.275899379f<sp/>*<sp/>2.828427125f<sp/>};</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/>col,<sp/>i,<sp/>k;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fdtbl_Y[64],<sp/>fdtbl_UV[64];</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>YTable[64],<sp/>UVTable[64];</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!data<sp/>||<sp/>!width<sp/>||<sp/>!height<sp/>||<sp/>comp<sp/>&gt;<sp/>4<sp/>||<sp/>comp<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/>quality<sp/>=<sp/>quality<sp/>?<sp/>quality<sp/>:<sp/>90;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/>quality<sp/>=<sp/>quality<sp/>&lt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>quality<sp/>&gt;<sp/>100<sp/>?<sp/>100<sp/>:<sp/>quality;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/>quality<sp/>=<sp/>quality<sp/>&lt;<sp/>50<sp/>?<sp/>5000<sp/>/<sp/>quality<sp/>:<sp/>200<sp/>-<sp/>quality<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uvti,<sp/>yti<sp/>=<sp/>(YQT[i]*quality+50)/100;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>YTable[stbiw__jpg_ZigZag[i]]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(yti<sp/>&lt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>yti<sp/>&gt;<sp/>255<sp/>?<sp/>255<sp/>:<sp/>yti);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uvti<sp/>=<sp/>(UVQT[i]*quality+50)/100;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UVTable[stbiw__jpg_ZigZag[i]]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(uvti<sp/>&lt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>uvti<sp/>&gt;<sp/>255<sp/>?<sp/>255<sp/>:<sp/>uvti);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(row<sp/>=<sp/>0,<sp/>k<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>8;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>8;<sp/>++col,<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdtbl_Y[k]<sp/><sp/>=<sp/>1<sp/>/<sp/>(YTable<sp/>[stbiw__jpg_ZigZag[k]]<sp/>*<sp/>aasf[row]<sp/>*<sp/>aasf[col]);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdtbl_UV[k]<sp/>=<sp/>1<sp/>/<sp/>(UVTable[stbiw__jpg_ZigZag[k]]<sp/>*<sp/>aasf[row]<sp/>*<sp/>aasf[col]);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>Headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>head0[]<sp/>=<sp/>{<sp/>0xFF,0xD8,0xFF,0xE0,0,0x10,</highlight><highlight class="charliteral">&apos;J&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">,0,1,1,0,0,1,0,1,0,0,0xFF,0xDB,0,0x84,0<sp/>};</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>head2[]<sp/>=<sp/>{<sp/>0xFF,0xDA,0,0xC,3,1,0,2,0x11,3,0x11,0,0x3F,0<sp/>};</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>head1[]<sp/>=<sp/>{<sp/>0xFF,0xC0,0,0x11,8,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(height&gt;&gt;8),STBIW_UCHAR(height),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(width&gt;&gt;8),STBIW_UCHAR(width),</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,1,0x11,0,2,0x11,1,3,0x11,1,0xFF,0xC4,0x01,0xA2,0<sp/>};</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)head0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(head0));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)YTable,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(YTable));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__putc(s,<sp/>1);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>UVTable,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UVTable));</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)head1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(head1));</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(std_dc_luminance_nrcodes+1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_dc_luminance_nrcodes)-1);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)std_dc_luminance_values,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_dc_luminance_values));</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__putc(s,<sp/>0x10);<sp/></highlight><highlight class="comment">//<sp/>HTYACinfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(std_ac_luminance_nrcodes+1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_ac_luminance_nrcodes)-1);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)std_ac_luminance_values,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_ac_luminance_values));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__putc(s,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>HTUDCinfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(std_dc_chrominance_nrcodes+1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_dc_chrominance_nrcodes)-1);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)std_dc_chrominance_values,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_dc_chrominance_values));</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__putc(s,<sp/>0x11);<sp/></highlight><highlight class="comment">//<sp/>HTUACinfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(std_ac_chrominance_nrcodes+1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_ac_chrominance_nrcodes)-1);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)std_ac_chrominance_values,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std_ac_chrominance_values));</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;func(s-&gt;context,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)head2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(head2));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encode<sp/>8x8<sp/>macroblocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>fillBits[]<sp/>=<sp/>{0x7F,<sp/>7};</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*imageData<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DCY=0,<sp/>DCU=0,<sp/>DCV=0;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitBuf=0,<sp/>bitCnt=0;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comp<sp/>==<sp/>2<sp/>is<sp/>grey+alpha<sp/>(alpha<sp/>is<sp/>ignored)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofsG<sp/>=<sp/>comp<sp/>&gt;<sp/>2<sp/>?<sp/>1<sp/>:<sp/>0,<sp/>ofsB<sp/>=<sp/>comp<sp/>&gt;<sp/>2<sp/>?<sp/>2<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>pos;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>y<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>YDU[64],<sp/>UDU[64],<sp/>VDU[64];</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(row<sp/>=<sp/>y,<sp/>pos<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>y+8;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>row<sp/>&gt;=<sp/>height<sp/>=&gt;<sp/>use<sp/>last<sp/>input<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clamped_row<sp/>=<sp/>(row<sp/>&lt;<sp/>height)<sp/>?<sp/>row<sp/>:<sp/>height<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_p<sp/>=<sp/>(stbi__flip_vertically_on_write<sp/>?<sp/>(height-1-clamped_row)<sp/>:<sp/>clamped_row)*width*comp;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(col<sp/>=<sp/>x;<sp/>col<sp/>&lt;<sp/>x+8;<sp/>++col,<sp/>++pos)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>col<sp/>&gt;=<sp/>width<sp/>=&gt;<sp/>use<sp/>pixel<sp/>from<sp/>last<sp/>input<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>base_p<sp/>+<sp/>((col<sp/>&lt;<sp/>width)<sp/>?<sp/>col<sp/>:<sp/>(width-1))*comp;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>imageData[p+0];</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>imageData[p+ofsG];</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>imageData[p+ofsB];</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YDU[pos]=+0.29900f*r+0.58700f*g+0.11400f*b-128;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UDU[pos]=-0.16874f*r-0.33126f*g+0.50000f*b;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VDU[pos]=+0.50000f*r-0.41869f*g-0.08131f*b;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCY<sp/>=<sp/>stbiw__jpg_processDU(s,<sp/>&amp;bitBuf,<sp/>&amp;bitCnt,<sp/>YDU,<sp/>fdtbl_Y,<sp/>DCY,<sp/>YDC_HT,<sp/>YAC_HT);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCU<sp/>=<sp/>stbiw__jpg_processDU(s,<sp/>&amp;bitBuf,<sp/>&amp;bitCnt,<sp/>UDU,<sp/>fdtbl_UV,<sp/>DCU,<sp/>UVDC_HT,<sp/>UVAC_HT);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCV<sp/>=<sp/>stbiw__jpg_processDU(s,<sp/>&amp;bitBuf,<sp/>&amp;bitCnt,<sp/>VDU,<sp/>fdtbl_UV,<sp/>DCV,<sp/>UVDC_HT,<sp/>UVAC_HT);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>bit<sp/>alignment<sp/>of<sp/>the<sp/>EOI<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbiw__jpg_writeBits(s,<sp/>&amp;bitBuf,<sp/>&amp;bitCnt,<sp/>fillBits);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/>stbiw__putc(s,<sp/>0xFF);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/>stbiw__putc(s,<sp/>0xD9);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_jpg_to_func(stbi_write_func<sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality)</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/>stbi__start_write_callbacks(&amp;s,<sp/>func,<sp/>context);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_write_jpg_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>quality);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_WRITE_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal">STBIWDEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_write_jpg(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/>stbi__write_context<sp/>s;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi__start_write_file(&amp;s,filename))<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stbi_write_jpg_core(&amp;s,<sp/>x,<sp/>y,<sp/>comp,<sp/>data,<sp/>quality);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__end_write_file(&amp;s);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_IMAGE_WRITE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Revision<sp/>history</highlight></codeline>
<codeline lineno="1535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.11<sp/><sp/>(2019-08-11)</highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.10<sp/><sp/>(2019-02-07)</highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>support<sp/>utf8<sp/>filenames<sp/>in<sp/>Windows;<sp/>fix<sp/>warnings<sp/>and<sp/>platform<sp/>ifdefs<sp/></highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.09<sp/><sp/>(2018-02-11)</highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>typo<sp/>in<sp/>zlib<sp/>quality<sp/>API,<sp/>improve<sp/>STB_I_W_STATIC<sp/>in<sp/>C++</highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.08<sp/><sp/>(2018-01-29)</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add<sp/>stbi__flip_vertically_on_write,<sp/>external<sp/>zlib,<sp/>zlib<sp/>quality,<sp/>choose<sp/>PNG<sp/>filter</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.07<sp/><sp/>(2017-07-24)</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc<sp/>fix</highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.06<sp/>(2017-07-23)</highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writing<sp/>JPEG<sp/>(using<sp/>Jon<sp/>Olick&apos;s<sp/>code)</highlight></codeline>
<codeline lineno="1547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.05<sp/><sp/><sp/>???</highlight></codeline>
<codeline lineno="1548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.04<sp/>(2017-03-03)</highlight></codeline>
<codeline lineno="1549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monochrome<sp/>BMP<sp/>expansion</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.03<sp/><sp/><sp/>???</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.02<sp/>(2016-04-02)</highlight></codeline>
<codeline lineno="1552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avoid<sp/>allocating<sp/>large<sp/>structures<sp/>on<sp/>the<sp/>stack</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.01<sp/>(2016-01-16)</highlight></codeline>
<codeline lineno="1554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIW_REALLOC_SIZED:<sp/>support<sp/>allocators<sp/>with<sp/>no<sp/>realloc<sp/>support</highlight></codeline>
<codeline lineno="1555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avoid<sp/>race-condition<sp/>in<sp/>crc<sp/>initialization</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minor<sp/>compile<sp/>issues</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.00<sp/>(2015-09-14)</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>installable<sp/>file<sp/>IO<sp/>function</highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.99<sp/>(2015-09-13)</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning<sp/>fixes;<sp/>TGA<sp/>rle<sp/>support</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.98<sp/>(2015-04-08)</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>added<sp/>STBIW_MALLOC,<sp/>STBIW_ASSERT<sp/>etc</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.97<sp/>(2015-01-18)</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed<sp/>HDR<sp/>asserts,<sp/>rewrote<sp/>HDR<sp/>rle<sp/>logic</highlight></codeline>
<codeline lineno="1565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.96<sp/>(2015-01-17)</highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add<sp/>HDR<sp/>output</highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>monochrome<sp/>BMP</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.95<sp/>(2014-08-17)</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add<sp/>monochrome<sp/>TGA<sp/>output</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.94<sp/>(2014-05-31)</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rename<sp/>private<sp/>functions<sp/>to<sp/>avoid<sp/>conflicts<sp/>with<sp/>stb_image.h</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.93<sp/>(2014-05-27)</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning<sp/>fixes</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.92<sp/>(2010-08-01)</highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>casts<sp/>to<sp/>unsigned<sp/>char<sp/>to<sp/>fix<sp/>warnings</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.91<sp/>(2010-07-17)</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>public<sp/>release</highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.90<sp/><sp/><sp/>first<sp/>internal<sp/>release</highlight></codeline>
<codeline lineno="1579"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1582"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1583"><highlight class="comment">This<sp/>software<sp/>is<sp/>available<sp/>under<sp/>2<sp/>licenses<sp/>--<sp/>choose<sp/>whichever<sp/>you<sp/>prefer.</highlight></codeline>
<codeline lineno="1584"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1585"><highlight class="comment">ALTERNATIVE<sp/>A<sp/>-<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="1586"><highlight class="comment">Copyright<sp/>(c)<sp/>2017<sp/>Sean<sp/>Barrett</highlight></codeline>
<codeline lineno="1587"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/></highlight></codeline>
<codeline lineno="1588"><highlight class="comment">this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/></highlight></codeline>
<codeline lineno="1589"><highlight class="comment">the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/></highlight></codeline>
<codeline lineno="1590"><highlight class="comment">use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/></highlight></codeline>
<codeline lineno="1591"><highlight class="comment">of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/></highlight></codeline>
<codeline lineno="1592"><highlight class="comment">so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="1593"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/></highlight></codeline>
<codeline lineno="1594"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="1595"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/></highlight></codeline>
<codeline lineno="1596"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/></highlight></codeline>
<codeline lineno="1597"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="1598"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/></highlight></codeline>
<codeline lineno="1599"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/></highlight></codeline>
<codeline lineno="1600"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/></highlight></codeline>
<codeline lineno="1601"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="1602"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1603"><highlight class="comment">ALTERNATIVE<sp/>B<sp/>-<sp/>Public<sp/>Domain<sp/>(www.unlicense.org)</highlight></codeline>
<codeline lineno="1604"><highlight class="comment">This<sp/>is<sp/>free<sp/>and<sp/>unencumbered<sp/>software<sp/>released<sp/>into<sp/>the<sp/>public<sp/>domain.</highlight></codeline>
<codeline lineno="1605"><highlight class="comment">Anyone<sp/>is<sp/>free<sp/>to<sp/>copy,<sp/>modify,<sp/>publish,<sp/>use,<sp/>compile,<sp/>sell,<sp/>or<sp/>distribute<sp/>this<sp/></highlight></codeline>
<codeline lineno="1606"><highlight class="comment">software,<sp/>either<sp/>in<sp/>source<sp/>code<sp/>form<sp/>or<sp/>as<sp/>a<sp/>compiled<sp/>binary,<sp/>for<sp/>any<sp/>purpose,<sp/></highlight></codeline>
<codeline lineno="1607"><highlight class="comment">commercial<sp/>or<sp/>non-commercial,<sp/>and<sp/>by<sp/>any<sp/>means.</highlight></codeline>
<codeline lineno="1608"><highlight class="comment">In<sp/>jurisdictions<sp/>that<sp/>recognize<sp/>copyright<sp/>laws,<sp/>the<sp/>author<sp/>or<sp/>authors<sp/>of<sp/>this<sp/></highlight></codeline>
<codeline lineno="1609"><highlight class="comment">software<sp/>dedicate<sp/>any<sp/>and<sp/>all<sp/>copyright<sp/>interest<sp/>in<sp/>the<sp/>software<sp/>to<sp/>the<sp/>public<sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="comment">domain.<sp/>We<sp/>make<sp/>this<sp/>dedication<sp/>for<sp/>the<sp/>benefit<sp/>of<sp/>the<sp/>public<sp/>at<sp/>large<sp/>and<sp/>to<sp/></highlight></codeline>
<codeline lineno="1611"><highlight class="comment">the<sp/>detriment<sp/>of<sp/>our<sp/>heirs<sp/>and<sp/>successors.<sp/>We<sp/>intend<sp/>this<sp/>dedication<sp/>to<sp/>be<sp/>an<sp/></highlight></codeline>
<codeline lineno="1612"><highlight class="comment">overt<sp/>act<sp/>of<sp/>relinquishment<sp/>in<sp/>perpetuity<sp/>of<sp/>all<sp/>present<sp/>and<sp/>future<sp/>rights<sp/>to<sp/></highlight></codeline>
<codeline lineno="1613"><highlight class="comment">this<sp/>software<sp/>under<sp/>copyright<sp/>law.</highlight></codeline>
<codeline lineno="1614"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/></highlight></codeline>
<codeline lineno="1615"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/></highlight></codeline>
<codeline lineno="1616"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="1617"><highlight class="comment">AUTHORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/></highlight></codeline>
<codeline lineno="1618"><highlight class="comment">ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/></highlight></codeline>
<codeline lineno="1619"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="1620"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1621"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="robot_dart/gui/stb_image_write.h"/>
  </compounddef>
</doxygen>
